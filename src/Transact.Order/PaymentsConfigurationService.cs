//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.Transacts.Order.PaymentsConfigurations
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IPaymentsConfigurationService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update local clearing parameters</summary>
        /// <param name="systemId">The system application identifier that could be used as entry reference or used as prefix in unique transaction identifiers</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>LocalClearingResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LocalClearingResponse> UpdateLocalClearingAsync(string systemId, LocalClearing payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the payment order parameter</summary>
        /// <param name="companyIdPath">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyIdHeader">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderParameterResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PaymentOrderParameterResponse> UpdatePaymentOrderParameterAsync(string companyIdPath, PaymentOrderParameter payload, bool? validate_only = null, string? credentials = null, string? companyIdHeader = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the payment order product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentOrderProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PaymentOrderProductResponse> UpdatePaymentOrderProductAsync(string productId, PaymentOrderProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayloadHeader 
    {
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Override? Override { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>LocalClearing</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocalClearing 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalClearingBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocalClearingBody 
    {
        /// <summary>Defines the clearing type. Values can be RTGS,  non-RTGS and instant payments.</summary>
        [Newtonsoft.Json.JsonProperty("clearingTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClearingTypes>? ClearingTypes { get; set; }= default!;
    
        /// <summary>The clearing system defined here will customize the funds transfer field specifications for BC transactions</summary>
        [Newtonsoft.Json.JsonProperty("clearingSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ClearingSystem { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>LocalClearingResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocalClearingResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalClearingResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocalClearingResponseBody 
    {
        /// <summary>Defines the clearing type. Values can be RTGS,  non-RTGS and instant payments.</summary>
        [Newtonsoft.Json.JsonProperty("clearingTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClearingTypes2>? ClearingTypes { get; set; }= default!;
    
        /// <summary>The clearing system defined here will customize the funds transfer field specifications for BC transactions</summary>
        [Newtonsoft.Json.JsonProperty("clearingSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string? ClearingSystem { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideBody 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderParameter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderParameter 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderParameterBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderParameterBody 
    {
        [Newtonsoft.Json.JsonProperty("poParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PoParam>? PoParam { get; set; }= default!;
    
        /// <summary>Groups the payment currency and country details</summary>
        [Newtonsoft.Json.JsonProperty("paymentConnectionMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? PaymentConnectionMethod { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("warehouseRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? WarehouseRequired { get; set; }= default!;
    
        /// <summary>Indicates the number of days that an order will remain in live status before moving to history</summary>
        [Newtonsoft.Json.JsonProperty("archiveDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyArchiveDays? ArchiveDays { get; set; }= default!;
    
        /// <summary>Used to attach any local routine to map any additional fields from payment order table to Temenos Payment System</summary>
        [Newtonsoft.Json.JsonProperty("mappingRoutine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyMappingRoutine? MappingRoutine { get; set; }= default!;
    
        /// <summary>Indicates the EB.MAPPING record that would map any additional fields from payment order table to temenos payments system</summary>
        [Newtonsoft.Json.JsonProperty("mappingRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyMappingRecord? MappingRecord { get; set; }= default!;
    
        /// <summary>Specifies the evaluating rule in the T24 rules engine which will return which connection method is to be used. Values supported are EXTERNAL meaning that a payment order message will be generated through integration framework and TPS meaning that the payment order message will be generated directly through Temenos Payment System</summary>
        [Newtonsoft.Json.JsonProperty("connectionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyConnectionRule? ConnectionRule { get; set; }= default!;
    
        /// <summary>Field containing ID of a local that can be executed to determine whether the connection method to be used is EXTERNAL meaning that a payment order message will be generated through integration framework and TPS meaning that the payment order message will be generated directly through TPS</summary>
        [Newtonsoft.Json.JsonProperty("connectionApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyConnectionApi? ConnectionApi { get; set; }= default!;
    
        /// <summary>Used to set Elapse time until which simulated payment order transactions are valid</summary>
        [Newtonsoft.Json.JsonProperty("simulationExpiryTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodySimulationExpiryTime? SimulationExpiryTime { get; set; }= default!;
    
        /// <summary>Indicates Archive process to be done for payments un-authorised after elapsed simulation time</summary>
        [Newtonsoft.Json.JsonProperty("purgeAwaitSubmitPrd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyPurgeAwaitSubmitPrd? PurgeAwaitSubmitPrd { get; set; }= default!;
    
        /// <summary>Used to Default product rule evaluator</summary>
        [Newtonsoft.Json.JsonProperty("defaultProductRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyDefaultProductRule? DefaultProductRule { get; set; }= default!;
    
        /// <summary>Used to default payment order product</summary>
        [Newtonsoft.Json.JsonProperty("defaultProductApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyDefaultProductApi? DefaultProductApi { get; set; }= default!;
    
        /// <summary>Used to identify which  local Fraud checking routine can be attached.</summary>
        [Newtonsoft.Json.JsonProperty("fraudRoutine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyFraudRoutine? FraudRoutine { get; set; }= default!;
    
        /// <summary>Indicates the  name of the account locator api used to determine whether the account is in T24, in another bank system or external.</summary>
        [Newtonsoft.Json.JsonProperty("accountLocatorApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyAccountLocatorApi? AccountLocatorApi { get; set; }= default!;
    
        /// <summary>Indicates the  name of the account locator rule used to determine whether the account is in T24, in another bank system or external.</summary>
        [Newtonsoft.Json.JsonProperty("accountLocatorRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyAccountLocatorRule? AccountLocatorRule { get; set; }= default!;
    
        /// <summary>The name of the local routine which will be triggered when the account is located in the bank but not within the T24 financial company. This routine can verify if the external account lookup is required or not and if required, will trigger the Account Lookup request and will handle its response .</summary>
        [Newtonsoft.Json.JsonProperty("offlineExternalAccountVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyOfflineExternalAccountVerification? OfflineExternalAccountVerification { get; set; }= default!;
    
        /// <summary>The default transaction code to be used by the Protection Limit is obtained from this field and it is checked if this transaction code is allowed, using the transaction type field of the Protection Limit.</summary>
        [Newtonsoft.Json.JsonProperty("defaultTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyDefaultTransactionCode? DefaultTransactionCode { get; set; }= default!;
    
        /// <summary>Indicates the time that the system must wait for a fraud check response</summary>
        [Newtonsoft.Json.JsonProperty("fraudCheckWaitResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyFraudCheckWaitResponse? FraudCheckWaitResponse { get; set; }= default!;
    
        /// <summary>Indicates whether the payment order products need to be cache read or not.</summary>
        [Newtonsoft.Json.JsonProperty("productCacheRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyProductCacheRead? ProductCacheRead { get; set; }= default!;
    
        /// <summary>Indicates the method through which the bank would initiate a global stop and recall payments request. Possible Values: MT199, MT196 and API</summary>
        [Newtonsoft.Json.JsonProperty("gsrpRequestMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGsrpRequestMessageType? GsrpRequestMessageType { get; set; }= default!;
    
        /// <summary>Indicates the number of calendar days within which a global stop and recall payments request can be sent to the swift GPI Tracker from the original payment date for Outgoing gsRP request</summary>
        [Newtonsoft.Json.JsonProperty("gsrpRequestOverdueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGsrpRequestOverdueDays? GsrpRequestOverdueDays { get; set; }= default!;
    
        /// <summary>Indicates the method through which the bank would respond to a global stop and recall payments request. Possible Values: MT199, MT196 and API</summary>
        [Newtonsoft.Json.JsonProperty("gsrpResponseMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGsrpResponseMessageType? GsrpResponseMessageType { get; set; }= default!;
    
        /// <summary>Indicates the number of calendar days within which a final response must be sent to the swift GPI Tracker for an incoming global stop and recall payments request</summary>
        [Newtonsoft.Json.JsonProperty("gsrpResponseOverdueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGsrpResponseOverdueDays? GsrpResponseOverdueDays { get; set; }= default!;
    
        /// <summary>If gpi message type is set as MT, TPH will utilise MT199 messages to communicate with the gpi Tracker. If set as API, TPH will push/consume API messages.</summary>
        [Newtonsoft.Json.JsonProperty("gpiConfirmation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGpiConfirmation? GpiConfirmation { get; set; }= default!;
    
        /// <summary>Indicates the active SWIFT gpi Tracker Exchange BIC</summary>
        [Newtonsoft.Json.JsonProperty("gpiExchangeBic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGpiExchangeBic? GpiExchangeBic { get; set; }= default!;
    
        /// <summary>Indicates the active SWIFT gpi Tracker Alert BIC</summary>
        [Newtonsoft.Json.JsonProperty("gpiAlertBic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyGpiAlertBic? GpiAlertBic { get; set; }= default!;
    
        /// <summary>Indicates whether special events must be published.</summary>
        [Newtonsoft.Json.JsonProperty("publishSpecialEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyPublishSpecialEvent? PublishSpecialEvent { get; set; }= default!;
    
        /// <summary>Indicates if the payment request is pre-approved and funds reservation can be skipped in Temenos Payments</summary>
        [Newtonsoft.Json.JsonProperty("preApprovedPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyPreApprovedPayment? PreApprovedPayment { get; set; }= default!;
    
        /// <summary>Indicates if the payment has been initiated with the main account pre-validated by the payment initiating system.</summary>
        [Newtonsoft.Json.JsonProperty("preValidatedAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyPreValidatedAccount? PreValidatedAccount { get; set; }= default!;
    
        /// <summary>Indicates if the payment is initiated with a pre-determined forex and forex calculation in the system can be skipped.</summary>
        [Newtonsoft.Json.JsonProperty("preDeterminedFx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterBodyPreDeterminedFx? PreDeterminedFx { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderParameterResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderParameterResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderParameterResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderParameterResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("poParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PoParam2>? PoParam { get; set; }= default!;
    
        /// <summary>Groups the payment currency and country details</summary>
        [Newtonsoft.Json.JsonProperty("paymentConnectionMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? PaymentConnectionMethod { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("warehouseRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? WarehouseRequired { get; set; }= default!;
    
        /// <summary>Indicates the number of days that an order will remain in live status before moving to history</summary>
        [Newtonsoft.Json.JsonProperty("archiveDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyArchiveDays? ArchiveDays { get; set; }= default!;
    
        /// <summary>Used to attach any local routine to map any additional fields from payment order table to Temenos Payment System</summary>
        [Newtonsoft.Json.JsonProperty("mappingRoutine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyMappingRoutine? MappingRoutine { get; set; }= default!;
    
        /// <summary>Indicates the EB.MAPPING record that would map any additional fields from payment order table to temenos payments system</summary>
        [Newtonsoft.Json.JsonProperty("mappingRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyMappingRecord? MappingRecord { get; set; }= default!;
    
        /// <summary>Specifies the evaluating rule in the T24 rules engine which will return which connection method is to be used. Values supported are EXTERNAL meaning that a payment order message will be generated through integration framework and TPS meaning that the payment order message will be generated directly through Temenos Payment System</summary>
        [Newtonsoft.Json.JsonProperty("connectionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyConnectionRule? ConnectionRule { get; set; }= default!;
    
        /// <summary>Field containing ID of a local that can be executed to determine whether the connection method to be used is EXTERNAL meaning that a payment order message will be generated through integration framework and TPS meaning that the payment order message will be generated directly through TPS</summary>
        [Newtonsoft.Json.JsonProperty("connectionApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyConnectionApi? ConnectionApi { get; set; }= default!;
    
        /// <summary>Used to set Elapse time until which simulated payment order transactions are valid</summary>
        [Newtonsoft.Json.JsonProperty("simulationExpiryTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodySimulationExpiryTime? SimulationExpiryTime { get; set; }= default!;
    
        /// <summary>Indicates Archive process to be done for payments un-authorised after elapsed simulation time</summary>
        [Newtonsoft.Json.JsonProperty("purgeAwaitSubmitPrd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyPurgeAwaitSubmitPrd? PurgeAwaitSubmitPrd { get; set; }= default!;
    
        /// <summary>Used to Default product rule evaluator</summary>
        [Newtonsoft.Json.JsonProperty("defaultProductRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyDefaultProductRule? DefaultProductRule { get; set; }= default!;
    
        /// <summary>Used to default payment order product</summary>
        [Newtonsoft.Json.JsonProperty("defaultProductApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyDefaultProductApi? DefaultProductApi { get; set; }= default!;
    
        /// <summary>Used to identify which  local Fraud checking routine can be attached.</summary>
        [Newtonsoft.Json.JsonProperty("fraudRoutine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyFraudRoutine? FraudRoutine { get; set; }= default!;
    
        /// <summary>Indicates the  name of the account locator api used to determine whether the account is in T24, in another bank system or external.</summary>
        [Newtonsoft.Json.JsonProperty("accountLocatorApi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyAccountLocatorApi? AccountLocatorApi { get; set; }= default!;
    
        /// <summary>Indicates the  name of the account locator rule used to determine whether the account is in T24, in another bank system or external.</summary>
        [Newtonsoft.Json.JsonProperty("accountLocatorRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyAccountLocatorRule? AccountLocatorRule { get; set; }= default!;
    
        /// <summary>The name of the local routine which will be triggered when the account is located in the bank but not within the T24 financial company. This routine can verify if the external account lookup is required or not and if required, will trigger the Account Lookup request and will handle its response .</summary>
        [Newtonsoft.Json.JsonProperty("offlineExternalAccountVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyOfflineExternalAccountVerification? OfflineExternalAccountVerification { get; set; }= default!;
    
        /// <summary>The default transaction code to be used by the Protection Limit is obtained from this field and it is checked if this transaction code is allowed, using the transaction type field of the Protection Limit.</summary>
        [Newtonsoft.Json.JsonProperty("defaultTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyDefaultTransactionCode? DefaultTransactionCode { get; set; }= default!;
    
        /// <summary>Indicates the time that the system must wait for a fraud check response</summary>
        [Newtonsoft.Json.JsonProperty("fraudCheckWaitResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyFraudCheckWaitResponse? FraudCheckWaitResponse { get; set; }= default!;
    
        /// <summary>Indicates whether the payment order products need to be cache read or not.</summary>
        [Newtonsoft.Json.JsonProperty("productCacheRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyProductCacheRead? ProductCacheRead { get; set; }= default!;
    
        /// <summary>Indicates the method through which the bank would initiate a global stop and recall payments request. Possible Values: MT199, MT196 and API</summary>
        [Newtonsoft.Json.JsonProperty("gsrpRequestMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGsrpRequestMessageType? GsrpRequestMessageType { get; set; }= default!;
    
        /// <summary>Indicates the number of calendar days within which a global stop and recall payments request can be sent to the swift GPI Tracker from the original payment date for Outgoing gsRP request</summary>
        [Newtonsoft.Json.JsonProperty("gsrpRequestOverdueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGsrpRequestOverdueDays? GsrpRequestOverdueDays { get; set; }= default!;
    
        /// <summary>Indicates the method through which the bank would respond to a global stop and recall payments request. Possible Values: MT199, MT196 and API</summary>
        [Newtonsoft.Json.JsonProperty("gsrpResponseMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGsrpResponseMessageType? GsrpResponseMessageType { get; set; }= default!;
    
        /// <summary>Indicates the number of calendar days within which a final response must be sent to the swift GPI Tracker for an incoming global stop and recall payments request</summary>
        [Newtonsoft.Json.JsonProperty("gsrpResponseOverdueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGsrpResponseOverdueDays? GsrpResponseOverdueDays { get; set; }= default!;
    
        /// <summary>If gpi message type is set as MT, TPH will utilise MT199 messages to communicate with the gpi Tracker. If set as API, TPH will push/consume API messages.</summary>
        [Newtonsoft.Json.JsonProperty("gpiConfirmation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGpiConfirmation? GpiConfirmation { get; set; }= default!;
    
        /// <summary>Indicates the active SWIFT gpi Tracker Exchange BIC</summary>
        [Newtonsoft.Json.JsonProperty("gpiExchangeBic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGpiExchangeBic? GpiExchangeBic { get; set; }= default!;
    
        /// <summary>Indicates the active SWIFT gpi Tracker Alert BIC</summary>
        [Newtonsoft.Json.JsonProperty("gpiAlertBic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyGpiAlertBic? GpiAlertBic { get; set; }= default!;
    
        /// <summary>Indicates whether special events must be published.</summary>
        [Newtonsoft.Json.JsonProperty("publishSpecialEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyPublishSpecialEvent? PublishSpecialEvent { get; set; }= default!;
    
        /// <summary>Indicates if the payment request is pre-approved and funds reservation can be skipped in Temenos Payments</summary>
        [Newtonsoft.Json.JsonProperty("preApprovedPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyPreApprovedPayment? PreApprovedPayment { get; set; }= default!;
    
        /// <summary>Indicates if the payment has been initiated with the main account pre-validated by the payment initiating system.</summary>
        [Newtonsoft.Json.JsonProperty("preValidatedAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyPreValidatedAccount? PreValidatedAccount { get; set; }= default!;
    
        /// <summary>Indicates if the payment is initiated with a pre-determined forex and forex calculation in the system can be skipped.</summary>
        [Newtonsoft.Json.JsonProperty("preDeterminedFx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentOrderParameterResponseBodyPreDeterminedFx? PreDeterminedFx { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderProduct</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderProduct 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderProductBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderProductBody 
    {
        /// <summary>Indicates the transfer of money between two or more parties or accounts</summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Payments>? Payments { get; set; }= default!;
    
        /// <summary>Groups the order currency and country details</summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Orders>? Orders { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("chargeOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeOptions>? ChargeOptions { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("clearingChannelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClearingChannelIds>? ClearingChannelIds { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalInformations>? AdditionalInformations { get; set; }= default!;
    
        /// <summary>The web link for additional information</summary>
        [Newtonsoft.Json.JsonProperty("weblinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Weblinks>? Weblinks { get; set; }= default!;
    
        /// <summary>Defines whether payment initiation can be done by providing beneficiary details. This is applicable when beneficiary is not within the same bank</summary>
        [Newtonsoft.Json.JsonProperty("payThroughBeneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? PayThroughBeneficiary { get; set; }= default!;
    
        /// <summary>Indicates if a future dated instruction can be inputted for the specific payment order product</summary>
        [Newtonsoft.Json.JsonProperty("futureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FutureDate { get; set; }= default!;
    
        /// <summary>Indicates the charge option which will be defaulted at the time of payment initiation for specific payment order product i.e. Recipient To Pay All Charges, Pay My Bank's Charges or Pay My Bank Charges Only.</summary>
        [Newtonsoft.Json.JsonProperty("defaultChargeOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? DefaultChargeOption { get; set; }= default!;
    
        /// <summary>Indicates if foreign currency exchange is allowed for the specific payment order product i.e. debit and credit accounts can be in different currency or not</summary>
        [Newtonsoft.Json.JsonProperty("allowFx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? AllowFx { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("FXRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? FXRate { get; set; }= default!;
    
        /// <summary>International Bank Account number, an identifier of the account. E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [Newtonsoft.Json.JsonProperty("IBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? IBAN { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("BIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Contains bank sort code or iban branch identifier for the account</summary>
        [Newtonsoft.Json.JsonProperty("sortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? SortCode { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("warehouseRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? WarehouseRequired { get; set; }= default!;
    
        /// <summary>Used to set if simulation is required or not</summary>
        [Newtonsoft.Json.JsonProperty("checkTransparency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? CheckTransparency { get; set; }= default!;
    
        /// <summary>Field will decide whether Fraud check is required or not</summary>
        [Newtonsoft.Json.JsonProperty("fraudCheckRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? FraudCheckRequired { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentOrderProductResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOrderProductResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentOrderProductResponseBody 
    {
        /// <summary>Indicates the transfer of money between two or more parties or accounts</summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Payments2>? Payments { get; set; }= default!;
    
        /// <summary>Groups the order currency and country details</summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Orders2>? Orders { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("chargeOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChargeOptions2>? ChargeOptions { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("clearingChannelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClearingChannelIds2>? ClearingChannelIds { get; set; }= default!;
    
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalInformations2>? AdditionalInformations { get; set; }= default!;
    
        /// <summary>The web link for additional information</summary>
        [Newtonsoft.Json.JsonProperty("weblinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Weblinks2>? Weblinks { get; set; }= default!;
    
        /// <summary>Defines whether payment initiation can be done by providing beneficiary details. This is applicable when beneficiary is not within the same bank</summary>
        [Newtonsoft.Json.JsonProperty("payThroughBeneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? PayThroughBeneficiary { get; set; }= default!;
    
        /// <summary>Indicates if a future dated instruction can be inputted for the specific payment order product</summary>
        [Newtonsoft.Json.JsonProperty("futureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FutureDate { get; set; }= default!;
    
        /// <summary>Indicates the charge option which will be defaulted at the time of payment initiation for specific payment order product i.e. Recipient To Pay All Charges, Pay My Bank's Charges or Pay My Bank Charges Only.</summary>
        [Newtonsoft.Json.JsonProperty("defaultChargeOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? DefaultChargeOption { get; set; }= default!;
    
        /// <summary>Indicates if foreign currency exchange is allowed for the specific payment order product i.e. debit and credit accounts can be in different currency or not</summary>
        [Newtonsoft.Json.JsonProperty("allowFx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? AllowFx { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("FXRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? FXRate { get; set; }= default!;
    
        /// <summary>International Bank Account number, an identifier of the account. E.g. GB29 NWBK 6016 1331 9268 19</summary>
        [Newtonsoft.Json.JsonProperty("IBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? IBAN { get; set; }= default!;
    
        /// <summary>The BIC code of the Beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("BIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string? BIC { get; set; }= default!;
    
        /// <summary>Contains bank sort code or iban branch identifier for the account</summary>
        [Newtonsoft.Json.JsonProperty("sortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? SortCode { get; set; }= default!;
    
        /// <summary>To define if warehouse is required at Payment order level or not</summary>
        [Newtonsoft.Json.JsonProperty("warehouseRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? WarehouseRequired { get; set; }= default!;
    
        /// <summary>Used to set if simulation is required or not</summary>
        [Newtonsoft.Json.JsonProperty("checkTransparency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? CheckTransparency { get; set; }= default!;
    
        /// <summary>Field will decide whether Fraud check is required or not</summary>
        [Newtonsoft.Json.JsonProperty("fraudCheckRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string? FraudCheckRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Override 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClearingTypes 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Defines whether the associated transaction type is used for inward or outward payments</summary>
        [Newtonsoft.Json.JsonProperty("inOutType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? InOutType { get; set; }= default!;
    
        /// <summary>Determines whether the associated transaction type processes debits, credits or both to the customer account</summary>
        [Newtonsoft.Json.JsonProperty("debitCreditId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DebitCreditId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by Transact</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClearingTypes2 
    {
        /// <summary>Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc.</summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? TransactionType { get; set; }= default!;
    
        /// <summary>Defines whether the associated transaction type is used for inward or outward payments</summary>
        [Newtonsoft.Json.JsonProperty("inOutType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string? InOutType { get; set; }= default!;
    
        /// <summary>Determines whether the associated transaction type processes debits, credits or both to the customer account</summary>
        [Newtonsoft.Json.JsonProperty("debitCreditId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string? DebitCreditId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by Transact</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual Transact error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PoParam 
    {
        /// <summary>Indicates the API that is used to call the published 3rd party API domain</summary>
        [Newtonsoft.Json.JsonProperty("apiSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PoParamApiSystem? ApiSystem { get; set; }= default!;
    
        /// <summary>Indicates the exact name of the actual local-api-domain</summary>
        [Newtonsoft.Json.JsonProperty("apiUrlPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PoParamApiUrlPath? ApiUrlPath { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("Lookup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Lookup>? Lookup { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Text>? Text { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyArchiveDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"archiveDays")]
        ArchiveDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyMappingRoutine
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mappingRoutine")]
        MappingRoutine = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyMappingRecord
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mappingRecord")]
        MappingRecord = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyConnectionRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connectionRule")]
        ConnectionRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyConnectionApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connectionApi")]
        ConnectionApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodySimulationExpiryTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"simulationExpiryTime")]
        SimulationExpiryTime = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyPurgeAwaitSubmitPrd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purgeAwaitSubmitPrd")]
        PurgeAwaitSubmitPrd = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyDefaultProductRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultProductRule")]
        DefaultProductRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyDefaultProductApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultProductApi")]
        DefaultProductApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyFraudRoutine
    {
        [System.Runtime.Serialization.EnumMember(Value = @"fraudRoutine")]
        FraudRoutine = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyAccountLocatorApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountLocatorApi")]
        AccountLocatorApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyAccountLocatorRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountLocatorRule")]
        AccountLocatorRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyOfflineExternalAccountVerification
    {
        [System.Runtime.Serialization.EnumMember(Value = @"offlineExternalAccountVerification")]
        OfflineExternalAccountVerification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyDefaultTransactionCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultTransactionCode")]
        DefaultTransactionCode = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyFraudCheckWaitResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"fraudCheckWaitResponse")]
        FraudCheckWaitResponse = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyProductCacheRead
    {
        [System.Runtime.Serialization.EnumMember(Value = @"productCacheRead")]
        ProductCacheRead = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGsrpRequestMessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpRequestMessageType")]
        GsrpRequestMessageType = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGsrpRequestOverdueDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpRequestOverdueDays")]
        GsrpRequestOverdueDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGsrpResponseMessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpResponseMessageType")]
        GsrpResponseMessageType = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGsrpResponseOverdueDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpResponseOverdueDays")]
        GsrpResponseOverdueDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGpiConfirmation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiConfirmation")]
        GpiConfirmation = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGpiExchangeBic
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiExchangeBic")]
        GpiExchangeBic = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyGpiAlertBic
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiAlertBic")]
        GpiAlertBic = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyPublishSpecialEvent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"publishSpecialEvent")]
        PublishSpecialEvent = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyPreApprovedPayment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preApprovedPayment")]
        PreApprovedPayment = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyPreValidatedAccount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preValidatedAccount")]
        PreValidatedAccount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterBodyPreDeterminedFx
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preDeterminedFx")]
        PreDeterminedFx = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PoParam2 
    {
        /// <summary>Indicates the API that is used to call the published 3rd party API domain</summary>
        [Newtonsoft.Json.JsonProperty("apiSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PoParam2ApiSystem? ApiSystem { get; set; }= default!;
    
        /// <summary>Indicates the exact name of the actual local-api-domain</summary>
        [Newtonsoft.Json.JsonProperty("apiUrlPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PoParam2ApiUrlPath? ApiUrlPath { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("Lookup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Lookup2>? Lookup { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Text2>? Text { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyArchiveDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"archiveDays")]
        ArchiveDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyMappingRoutine
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mappingRoutine")]
        MappingRoutine = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyMappingRecord
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mappingRecord")]
        MappingRecord = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyConnectionRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connectionRule")]
        ConnectionRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyConnectionApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connectionApi")]
        ConnectionApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodySimulationExpiryTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"simulationExpiryTime")]
        SimulationExpiryTime = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyPurgeAwaitSubmitPrd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"purgeAwaitSubmitPrd")]
        PurgeAwaitSubmitPrd = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyDefaultProductRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultProductRule")]
        DefaultProductRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyDefaultProductApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultProductApi")]
        DefaultProductApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyFraudRoutine
    {
        [System.Runtime.Serialization.EnumMember(Value = @"fraudRoutine")]
        FraudRoutine = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyAccountLocatorApi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountLocatorApi")]
        AccountLocatorApi = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyAccountLocatorRule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountLocatorRule")]
        AccountLocatorRule = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyOfflineExternalAccountVerification
    {
        [System.Runtime.Serialization.EnumMember(Value = @"offlineExternalAccountVerification")]
        OfflineExternalAccountVerification = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyDefaultTransactionCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"defaultTransactionCode")]
        DefaultTransactionCode = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyFraudCheckWaitResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"fraudCheckWaitResponse")]
        FraudCheckWaitResponse = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyProductCacheRead
    {
        [System.Runtime.Serialization.EnumMember(Value = @"productCacheRead")]
        ProductCacheRead = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGsrpRequestMessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpRequestMessageType")]
        GsrpRequestMessageType = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGsrpRequestOverdueDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpRequestOverdueDays")]
        GsrpRequestOverdueDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGsrpResponseMessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpResponseMessageType")]
        GsrpResponseMessageType = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGsrpResponseOverdueDays
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gsrpResponseOverdueDays")]
        GsrpResponseOverdueDays = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGpiConfirmation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiConfirmation")]
        GpiConfirmation = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGpiExchangeBic
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiExchangeBic")]
        GpiExchangeBic = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyGpiAlertBic
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gpiAlertBic")]
        GpiAlertBic = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyPublishSpecialEvent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"publishSpecialEvent")]
        PublishSpecialEvent = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyPreApprovedPayment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preApprovedPayment")]
        PreApprovedPayment = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyPreValidatedAccount
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preValidatedAccount")]
        PreValidatedAccount = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentOrderParameterResponseBodyPreDeterminedFx
    {
        [System.Runtime.Serialization.EnumMember(Value = @"preDeterminedFx")]
        PreDeterminedFx = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Payments 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>ISO country code of the financial institution. </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Orders 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>ISO country code of the financial institution. </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeOptions 
    {
        /// <summary>This field will hold the charge applicable for the order</summary>
        [Newtonsoft.Json.JsonProperty("chargeOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ChargeOption { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClearingChannelIds 
    {
        /// <summary>Indicates the clearing channel details to be used</summary>
        [Newtonsoft.Json.JsonProperty("clearingChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? ClearingChannelId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInformations 
    {
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? AdditionalInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Weblinks 
    {
        /// <summary>The web link for additional information</summary>
        [Newtonsoft.Json.JsonProperty("weblink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Weblink { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Payments2 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>ISO country code of the financial institution. </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Orders2 
    {
        /// <summary>Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? CurrencyId { get; set; }= default!;
    
        /// <summary>ISO country code of the financial institution. </summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? CountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChargeOptions2 
    {
        /// <summary>This field will hold the charge applicable for the order</summary>
        [Newtonsoft.Json.JsonProperty("chargeOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? ChargeOption { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClearingChannelIds2 
    {
        /// <summary>Indicates the clearing channel details to be used</summary>
        [Newtonsoft.Json.JsonProperty("clearingChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? ClearingChannelId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInformations2 
    {
        /// <summary>Additional Information provided to add context</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        public string? AdditionalInformation { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Weblinks2 
    {
        /// <summary>The web link for additional information</summary>
        [Newtonsoft.Json.JsonProperty("weblink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Weblink { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PoParamApiSystem
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiSystem")]
        ApiSystem = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PoParamApiUrlPath
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiUrlPath")]
        ApiUrlPath = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Lookup 
    {
        /// <summary>Indicates the value to be located by TPH to retrieve the named end point</summary>
        [Newtonsoft.Json.JsonProperty("apiLookupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LookupApiLookupName? ApiLookupName { get; set; }= default!;
    
        /// <summary>Indicates the value of the actual API name to be called in the 3rd party Published domain</summary>
        [Newtonsoft.Json.JsonProperty("apiCallName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LookupApiCallName? ApiCallName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Text 
    {
        /// <summary>Indicates the name-value pair which is used to define other parameters such as Http Headers which are required to access the given end point</summary>
        [Newtonsoft.Json.JsonProperty("apiParamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TextApiParamName? ApiParamName { get; set; }= default!;
    
        /// <summary>Indicates the name-value pair which is used to define other parameters such as Http Headers and its value which are required to access the given end point</summary>
        [Newtonsoft.Json.JsonProperty("apiParamValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TextApiParamValue? ApiParamValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PoParam2ApiSystem
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiSystem")]
        ApiSystem = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PoParam2ApiUrlPath
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiUrlPath")]
        ApiUrlPath = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Lookup2 
    {
        /// <summary>Indicates the value to be located by TPH to retrieve the named end point</summary>
        [Newtonsoft.Json.JsonProperty("apiLookupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Lookup2ApiLookupName? ApiLookupName { get; set; }= default!;
    
        /// <summary>Indicates the value of the actual API name to be called in the 3rd party Published domain</summary>
        [Newtonsoft.Json.JsonProperty("apiCallName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Lookup2ApiCallName? ApiCallName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Text2 
    {
        /// <summary>Indicates the name-value pair which is used to define other parameters such as Http Headers which are required to access the given end point</summary>
        [Newtonsoft.Json.JsonProperty("apiParamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Text2ApiParamName? ApiParamName { get; set; }= default!;
    
        /// <summary>Indicates the name-value pair which is used to define other parameters such as Http Headers and its value which are required to access the given end point</summary>
        [Newtonsoft.Json.JsonProperty("apiParamValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Text2ApiParamValue? ApiParamValue { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LookupApiLookupName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiLookupName")]
        ApiLookupName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LookupApiCallName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiCallName")]
        ApiCallName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TextApiParamName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiParamName")]
        ApiParamName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TextApiParamValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiParamValue")]
        ApiParamValue = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Lookup2ApiLookupName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiLookupName")]
        ApiLookupName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Lookup2ApiCallName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiCallName")]
        ApiCallName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Text2ApiParamName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiParamName")]
        ApiParamName = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Text2ApiParamValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiParamValue")]
        ApiParamValue = 0,
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016