//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.Transacts.Party.SaasBeneficiaries
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ISaasBeneficiaryService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates Payments beneficiary details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentsBeneficiaryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentsBeneficiaryResponse> CreatePaymentsBeneficiaryAsync(PaymentsBeneficiary payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves Payments beneficiary details</summary>
        /// <param name="beneficiaryId">Indicates the reference of the financial institution that allows access to the beneficiary information</param>
        /// <param name="customerId">Identifier of the customer</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>BeneficiaryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BeneficiaryResponse> GetBeneficiaryAsync(string beneficiaryId, string? customerId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates Payments beneficiary details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentsBeneficiaryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentsBeneficiaryResponse> UpdatePaymentsBeneficiaryAsync(string beneficiaryId, PaymentsBeneficiary payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes Payments beneficiary details</summary>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>PaymentsBeneficiaryResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentsBeneficiaryResponse> DeletePaymentsBeneficiaryAsync(string beneficiaryId, PaymentsBeneficiaryDelete? payload = null, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayloadHeader 
    {
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Override? Override { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentsBeneficiary</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentsBeneficiary 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentsBeneficiaryBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentsBeneficiaryBody 
    {
        /// <summary>Nickname of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("nickNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NickNames>? NickNames { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryNames>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("lastNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LastNames>? LastNames { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [Newtonsoft.Json.JsonProperty("streets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Streets>? Streets { get; set; }= default!;
    
        /// <summary>The town and/or city component of the base address of a customer</summary>
        [Newtonsoft.Json.JsonProperty("addressCities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressCities>? AddressCities { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [Newtonsoft.Json.JsonProperty("postCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PostCodes>? PostCodes { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary's country address</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryCountries>? BeneficiaryCountries { get; set; }= default!;
    
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCreditorAddressLines>? UltimateCreditorAddressLines { get; set; }= default!;
    
        /// <summary>Indicates the name of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankDisplayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankDisplayNames>? AccountWithBankDisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the street address of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankStreets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankStreets>? AccountWithBankStreets { get; set; }= default!;
    
        /// <summary>Indicates the town or city of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankCities>? AccountWithBankCities { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankPostCodes>? AccountWithBankPostCodes { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankCountryIds>? AccountWithBankCountryIds { get; set; }= default!;
    
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentDetails>? PaymentDetails { get; set; }= default!;
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryDetails>? BeneficiaryDetails { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("ultimateCredDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCredDetails>? UltimateCredDetails { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>This is a free text field which can be provided for Bank defined beneficiaries</summary>
        [Newtonsoft.Json.JsonProperty("hintText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? HintText { get; set; }= default!;
    
        /// <summary>The default narrative which will be provided on the debit and credit side of the payment. </summary>
        [Newtonsoft.Json.JsonProperty("defaultNarrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DefaultNarrative { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Indicates the account type of the beneficiary account like CLABE , MOBILE , ACCOUNT NO. etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(39)]
        public string? BeneficiarySchemeName { get; set; }= default!;
    
        /// <summary>The country to which a payment is sent, usually where the beneficiary resides</summary>
        [Newtonsoft.Json.JsonProperty("paymentCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCountry { get; set; }= default!;
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherIdType { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherId { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DateOfBirth { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary place of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthProvince { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary city of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthCity { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary country of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthCountry { get; set; }= default!;
    
        /// <summary>Indicates the name of the identification scheme, in a coded form as published in an external list.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeCode { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the Beneficiary </summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeIssuer { get; set; }= default!;
    
        /// <summary>Contains the actual creditor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditor { get; set; }= default!;
    
        /// <summary>It specifies the address type to be used for the Ultimate creditor of payment i.e. Postal, Business, Residential etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorAddressType { get; set; }= default!;
    
        /// <summary>It specifies the BIC code of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBIC { get; set; }= default!;
    
        /// <summary>This is to indicate if the Ultimate Creditor is an Organisation or a Private individual</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherIdType { get; set; }= default!;
    
        /// <summary>This is the other identifier of ultimate creditor, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherId { get; set; }= default!;
    
        /// <summary>It indicates the Date Of Birth of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorDOB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorDOB { get; set; }= default!;
    
        /// <summary>It indicates the place of birth for ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthProvince { get; set; }= default!;
    
        /// <summary>It indicates the birth city of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthCity { get; set; }= default!;
    
        /// <summary>It indicates the country of birth for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthCountry { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeIssuer { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
        /// <summary>Bank sort code details with account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankSortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankSortCode { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>Preferred payment product can be specified for Beneficiary. This will be used for defaulting the payment product for specific beneficiary. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PreferredPaymentProduct { get; set; }= default!;
    
        /// <summary>The purpose code for the payment. Should be one of the pre-defined purpose codes in the application and information will be used for payment processing</summary>
        [Newtonsoft.Json.JsonProperty("paymentCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCategory { get; set; }= default!;
    
        /// <summary>Indicates the Id of payment purpose code i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderPurposeCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderPurposeCodeId { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Preferred payment amount can be specified for the beneficiary. If specified, it will be populated during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PreferredPaymentAmount { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOurCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>List of Beneficiary risk rate that the protection limit applies to</summary>
        [Newtonsoft.Json.JsonProperty("benRiskRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BenRiskRate { get; set; }= default!;
    
        /// <summary>The identifier of a beneficiary (defined by the institution) being linked to a customer-defined beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("linkBeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LinkBeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionStatus { get; set; }= default!;
    
        /// <summary>The unique identifier/Message Reference of the record created.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniqueIdentifier { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentsBeneficiaryResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentsBeneficiaryResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentsBeneficiaryResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentsBeneficiaryResponseBody 
    {
        /// <summary>Nickname of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("nickNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NickNames2>? NickNames { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryNames2>? BeneficiaryNames { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("lastNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LastNames2>? LastNames { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [Newtonsoft.Json.JsonProperty("streets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Streets2>? Streets { get; set; }= default!;
    
        /// <summary>The town and/or city component of the base address of a customer</summary>
        [Newtonsoft.Json.JsonProperty("addressCities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressCities2>? AddressCities { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [Newtonsoft.Json.JsonProperty("postCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PostCodes2>? PostCodes { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary's country address</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryCountries2>? BeneficiaryCountries { get; set; }= default!;
    
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCreditorAddressLines2>? UltimateCreditorAddressLines { get; set; }= default!;
    
        /// <summary>Indicates the name of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankDisplayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankDisplayNames2>? AccountWithBankDisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the street address of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankStreets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankStreets2>? AccountWithBankStreets { get; set; }= default!;
    
        /// <summary>Indicates the town or city of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankCities2>? AccountWithBankCities { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankPostCodes2>? AccountWithBankPostCodes { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountWithBankCountryIds2>? AccountWithBankCountryIds { get; set; }= default!;
    
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentDetails2>? PaymentDetails { get; set; }= default!;
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryDetails2>? BeneficiaryDetails { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("ultimateCredDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCredDetails2>? UltimateCredDetails { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>This is a free text field which can be provided for Bank defined beneficiaries</summary>
        [Newtonsoft.Json.JsonProperty("hintText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? HintText { get; set; }= default!;
    
        /// <summary>The default narrative which will be provided on the debit and credit side of the payment. </summary>
        [Newtonsoft.Json.JsonProperty("defaultNarrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DefaultNarrative { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Indicates the account type of the beneficiary account like CLABE , MOBILE , ACCOUNT NO. etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(39)]
        public string? BeneficiarySchemeName { get; set; }= default!;
    
        /// <summary>The country to which a payment is sent, usually where the beneficiary resides</summary>
        [Newtonsoft.Json.JsonProperty("paymentCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCountry { get; set; }= default!;
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherIdType { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherId { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DateOfBirth { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary place of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthProvince { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary city of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthCity { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary country of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthCountry { get; set; }= default!;
    
        /// <summary>Indicates the name of the identification scheme, in a coded form as published in an external list.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeCode { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the Beneficiary </summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeIssuer { get; set; }= default!;
    
        /// <summary>Contains the actual creditor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditor { get; set; }= default!;
    
        /// <summary>It specifies the address type to be used for the Ultimate creditor of payment i.e. Postal, Business, Residential etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorAddressType { get; set; }= default!;
    
        /// <summary>It specifies the BIC code of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBIC { get; set; }= default!;
    
        /// <summary>This is to indicate if the Ultimate Creditor is an Organisation or a Private individual</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherIdType { get; set; }= default!;
    
        /// <summary>This is the other identifier of ultimate creditor, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherId { get; set; }= default!;
    
        /// <summary>It indicates the Date Of Birth of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorDOB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorDOB { get; set; }= default!;
    
        /// <summary>It indicates the place of birth for ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthProvince { get; set; }= default!;
    
        /// <summary>It indicates the birth city of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthCity { get; set; }= default!;
    
        /// <summary>It indicates the country of birth for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthCountry { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeIssuer { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
        /// <summary>Bank sort code details with account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankSortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankSortCode { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>Preferred payment product can be specified for Beneficiary. This will be used for defaulting the payment product for specific beneficiary. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PreferredPaymentProduct { get; set; }= default!;
    
        /// <summary>The purpose code for the payment. Should be one of the pre-defined purpose codes in the application and information will be used for payment processing</summary>
        [Newtonsoft.Json.JsonProperty("paymentCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCategory { get; set; }= default!;
    
        /// <summary>Indicates the Id of payment purpose code i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderPurposeCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentOrderPurposeCodeId { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Preferred payment amount can be specified for the beneficiary. If specified, it will be populated during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PreferredPaymentAmount { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOurCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>List of Beneficiary risk rate that the protection limit applies to</summary>
        [Newtonsoft.Json.JsonProperty("benRiskRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BenRiskRate { get; set; }= default!;
    
        /// <summary>The identifier of a beneficiary (defined by the institution) being linked to a customer-defined beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("linkBeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LinkBeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideBody 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>BusinessScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails2>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails3>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>PaymentsBeneficiaryDelete</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentsBeneficiaryDelete 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryHeader 
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit4? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [Newtonsoft.Json.JsonProperty("page_start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [Newtonsoft.Json.JsonProperty("total_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [Newtonsoft.Json.JsonProperty("page_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>BeneficiaryResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BeneficiaryResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Override 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NickNames 
    {
        /// <summary>Nickname of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NickName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryNames 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LastNames 
    {
        /// <summary>The last name of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LastName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Streets 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Street { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressCities 
    {
        /// <summary>The town and/or city component of the base address of a customer</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AddressCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostCodes 
    {
        /// <summary>Identifies the address postal code for the customer.</summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryCountries 
    {
        /// <summary>Indicates the beneficiary's country address</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCreditorAddressLines 
    {
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorAddressLine { get; set; }= default!;
    
        /// <summary>It specifies the Country of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankDisplayNames 
    {
        /// <summary>Indicates the name of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankDisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankStreets 
    {
        /// <summary>Indicates the street address of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankStreet { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankCities 
    {
        /// <summary>Indicates the town or city of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankPostCodes 
    {
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankCountryIds 
    {
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentDetails 
    {
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryDetails 
    {
        /// <summary>Department identifier.</summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DepartmentId { get; set; }= default!;
    
        /// <summary>Contains a sub-division identifier of a large organisation or building</summary>
        [Newtonsoft.Json.JsonProperty("subDepartmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubDepartmentId { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCredDetails 
    {
        /// <summary>Communication Address of the Customer</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Address { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Specifies town name of the Ultimate Creditor</summary>
        [Newtonsoft.Json.JsonProperty("townCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TownCity { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NickNames2 
    {
        /// <summary>Nickname of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NickName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryNames2 
    {
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LastNames2 
    {
        /// <summary>The last name of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LastName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Streets2 
    {
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Street { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressCities2 
    {
        /// <summary>The town and/or city component of the base address of a customer</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AddressCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostCodes2 
    {
        /// <summary>Identifies the address postal code for the customer.</summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryCountries2 
    {
        /// <summary>Indicates the beneficiary's country address</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCreditorAddressLines2 
    {
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorAddressLine { get; set; }= default!;
    
        /// <summary>It specifies the Country of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorCountry { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankDisplayNames2 
    {
        /// <summary>Indicates the name of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankDisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankStreets2 
    {
        /// <summary>Indicates the street address of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankStreet { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankCities2 
    {
        /// <summary>Indicates the town or city of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCity { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankPostCodes2 
    {
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountWithBankCountryIds2 
    {
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCountryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentDetails2 
    {
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryDetails2 
    {
        /// <summary>Department identifier.</summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DepartmentId { get; set; }= default!;
    
        /// <summary>Contains a sub-division identifier of a large organisation or building</summary>
        [Newtonsoft.Json.JsonProperty("subDepartmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? SubDepartmentId { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCredDetails2 
    {
        /// <summary>Communication Address of the Customer</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Address { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Specifies town name of the Ultimate Creditor</summary>
        [Newtonsoft.Json.JsonProperty("townCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TownCity { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The usable options for the override.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }= default!;
    
        /// <summary>The type of the override.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails2 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails3 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit4 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCreditorAddressLines3>? UltimateCreditorAddressLines { get; set; }= default!;
    
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentDetails3>? PaymentDetails { get; set; }= default!;
    
        /// <summary>Indicates additional details of Beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficiaryDetails3>? BeneficiaryDetails { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("ultimateCredDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UltimateCredDetails3>? UltimateCredDetails { get; set; }= default!;
    
        /// <summary>Indicates the reference of the financial institution that allows access to the beneficiary information</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(17)]
        public string? BeneficiaryId { get; set; }= default!;
    
        /// <summary>Nickname of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? NickName { get; set; }= default!;
    
        /// <summary>Identifier of the customer</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CustomerId { get; set; }= default!;
    
        /// <summary>The reference which is provided to the beneficiary/ creditor by the originator of payment</summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CustomerReference { get; set; }= default!;
    
        /// <summary>Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CategoryId { get; set; }= default!;
    
        /// <summary>This is a free text field which can be provided for Bank defined beneficiaries</summary>
        [Newtonsoft.Json.JsonProperty("hintText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? HintText { get; set; }= default!;
    
        /// <summary>The default narrative which will be provided on the debit and credit side of the payment. </summary>
        [Newtonsoft.Json.JsonProperty("defaultNarrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? DefaultNarrative { get; set; }= default!;
    
        /// <summary>Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryCustomerId { get; set; }= default!;
    
        /// <summary>BIC (Bank Identifier Code) of the beneficiary customer </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBIC { get; set; }= default!;
    
        /// <summary>Short title or short name of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryName { get; set; }= default!;
    
        /// <summary>The last name of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LastName { get; set; }= default!;
    
        /// <summary>Contains the first line of customer's base address, example building number, street number etc.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Street { get; set; }= default!;
    
        /// <summary>The town and/or city component of the base address of a customer</summary>
        [Newtonsoft.Json.JsonProperty("addressCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AddressCity { get; set; }= default!;
    
        /// <summary>Identifies the address postal code for the customer.</summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PostCode { get; set; }= default!;
    
        /// <summary>Identifies the country of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Country { get; set; }= default!;
    
        /// <summary>International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryIBAN { get; set; }= default!;
    
        /// <summary>Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? AccountId { get; set; }= default!;
    
        /// <summary>Indicates the account type of the beneficiary account like CLABE , MOBILE , ACCOUNT NO. etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeName { get; set; }= default!;
    
        /// <summary>The country to which a payment is sent, usually where the beneficiary resides</summary>
        [Newtonsoft.Json.JsonProperty("paymentCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentCountry { get; set; }= default!;
    
        /// <summary>Specifies whether the account belongs to same system where beneficiary is being created. Can accept only OWN which indicates account located in same system</summary>
        [Newtonsoft.Json.JsonProperty("accountLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? AccountLocation { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary other identifier, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherId { get; set; }= default!;
    
        /// <summary>Indicates the type of the beneficiary i.e. Organisation or Private</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOtherIdType { get; set; }= default!;
    
        /// <summary>The date of birth of an individual customer</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DateOfBirth { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary place of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthProvince { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary city of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBirthCity { get; set; }= default!;
    
        /// <summary>Indicates the beneficiary country of birth</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? BeneficiaryBirthCountry { get; set; }= default!;
    
        /// <summary>Indicates the name of the identification scheme, in a coded form as published in an external list.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeCode { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the Beneficiary </summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("beneficiarySchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiarySchemeIssuer { get; set; }= default!;
    
        /// <summary>This is to indicate if the Ultimate Creditor is an Organisation or a Private individual</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherIdType { get; set; }= default!;
    
        /// <summary>This is the other identifier of ultimate creditor, e.g. could be a Social Security Number, a Tax Identification Number, Passport Number, a Clearing Id etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorOtherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorOtherId { get; set; }= default!;
    
        /// <summary>Contains the actual creditor account number</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? UltimateCreditor { get; set; }= default!;
    
        /// <summary>It specifies the address type to be used for the Ultimate creditor of payment i.e. Postal, Business, Residential etc.</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? UltimateCreditorAddressType { get; set; }= default!;
    
        /// <summary>It specifies the BIC code of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBIC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBIC { get; set; }= default!;
    
        /// <summary>It specifies the Country of Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? UltimateCreditorCountry { get; set; }= default!;
    
        /// <summary>It indicates the Date Of Birth of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorDOB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? UltimateCreditorDOB { get; set; }= default!;
    
        /// <summary>It indicates the place of birth for ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthProvince { get; set; }= default!;
    
        /// <summary>It indicates the birth city of ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorBirthCity { get; set; }= default!;
    
        /// <summary>It indicates the country of birth for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorBirthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? UltimateCreditorBirthCountry { get; set; }= default!;
    
        /// <summary>The proprietary code of the scheme which issued the identifier for the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeProprietary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeProprietary { get; set; }= default!;
    
        /// <summary>Indicates the issuer of other id of the ultimate creditor</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorSchemeIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? UltimateCreditorSchemeIssuer { get; set; }= default!;
    
        /// <summary>Identifies the bank where the beneficiary maintains his account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBank { get; set; }= default!;
    
        /// <summary>Bank sort code details with account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankSortCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankSortCode { get; set; }= default!;
    
        /// <summary>This is the IBAN of the institution where beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankIBAN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankIBAN { get; set; }= default!;
    
        /// <summary>Clearing code or sort code of the beneficiary bank</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBankClearingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryBankClearingCode { get; set; }= default!;
    
        /// <summary>Indicates the name of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankDisplayName { get; set; }= default!;
    
        /// <summary>Indicates the street address of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankStreet { get; set; }= default!;
    
        /// <summary>Indicates the town or city of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCity { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
        /// <summary>The country of the beneficiary institution i.e. where the final creditor holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankCountryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? AccountWithBankCountryId { get; set; }= default!;
    
        /// <summary>Preferred payment product can be specified for Beneficiary. This will be used for defaulting the payment product for specific beneficiary. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? PreferredPaymentProduct { get; set; }= default!;
    
        /// <summary>The purpose code for the payment. Should be one of the pre-defined purpose codes in the application and information will be used for payment processing</summary>
        [Newtonsoft.Json.JsonProperty("paymentCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? PaymentCategory { get; set; }= default!;
    
        /// <summary>Indicates the Id of payment purpose code i.e. purpose of the instruction based on a set of pre-defined categories.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrderPurposeCodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string? PaymentOrderPurposeCodeId { get; set; }= default!;
    
        /// <summary>This field holds the transaction currency or currency in which payment is initiated. </summary>
        [Newtonsoft.Json.JsonProperty("paymentCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? PaymentCurrency { get; set; }= default!;
    
        /// <summary>Preferred payment amount can be specified for the beneficiary. If specified, it will be populated during payment processing. </summary>
        [Newtonsoft.Json.JsonProperty("preferredPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? PreferredPaymentAmount { get; set; }= default!;
    
        /// <summary>Indicates the bearer of the charges. For example: BEN( All transaction charges are to be borne by the beneficiary customer.), OUR (All transaction charges are to be borne by the ordering customer.), SHA (Transaction charges on the Sender's side are to be borne by the ordering customer, transaction charges on the Receiver's side are to be borne by the beneficiary customer.)</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryOurCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BeneficiaryOurCharges { get; set; }= default!;
    
        /// <summary>List of Beneficiary risk rate that the protection limit applies to</summary>
        [Newtonsoft.Json.JsonProperty("benRiskRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? BenRiskRate { get; set; }= default!;
    
        /// <summary>The identifier of a beneficiary (defined by the institution) being linked to a customer-defined beneficiary</summary>
        [Newtonsoft.Json.JsonProperty("linkBeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? LinkBeneficiaryId { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCreditorAddressLines3 
    {
        /// <summary>It specifies the address fields to be used for the Ultimate creditor of payment</summary>
        [Newtonsoft.Json.JsonProperty("ultimateCreditorAddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? UltimateCreditorAddressLine { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentDetails3 
    {
        /// <summary>Indicates the payment details for the beneficiary to apply the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? PaymentDetail { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BeneficiaryDetails3 
    {
        /// <summary>Department identifier.</summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? DepartmentId { get; set; }= default!;
    
        /// <summary>Contains a sub-division identifier of a large organisation or building</summary>
        [Newtonsoft.Json.JsonProperty("subDepartmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? SubDepartmentId { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UltimateCredDetails3 
    {
        /// <summary>Communication Address of the Customer</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? Address { get; set; }= default!;
    
        /// <summary>Identifies the building number where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? BuildingNumber { get; set; }= default!;
    
        /// <summary>Identifies the name of the building where customer resides</summary>
        [Newtonsoft.Json.JsonProperty("buildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? BuildingName { get; set; }= default!;
    
        /// <summary>Contains the floor number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("floorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? FloorNumber { get; set; }= default!;
    
        /// <summary>Post Office Box (POB) number that relates to financial institution</summary>
        [Newtonsoft.Json.JsonProperty("postBoxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? PostBoxNumber { get; set; }= default!;
    
        /// <summary>Identifies the apartment number of the customer address</summary>
        [Newtonsoft.Json.JsonProperty("apartmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string? ApartmentNumber { get; set; }= default!;
    
        /// <summary>The town associated with the address of Customer or Party</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? Town { get; set; }= default!;
    
        /// <summary>Stores the district name of the  Beneficiary Customer.</summary>
        [Newtonsoft.Json.JsonProperty("districtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? DistrictName { get; set; }= default!;
    
        /// <summary>Specifies town name of the Ultimate Creditor</summary>
        [Newtonsoft.Json.JsonProperty("townCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? TownCity { get; set; }= default!;
    
        /// <summary>Indicates the post code of financial institution with which beneficiary holds an account</summary>
        [Newtonsoft.Json.JsonProperty("accountWithBankPostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? AccountWithBankPostCode { get; set; }= default!;
    
        /// <summary>Represents a subdivision of a country such as state, region, country</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? State { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016