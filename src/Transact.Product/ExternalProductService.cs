//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.Transacts.Product.ExternalProducts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IExternalProductService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the product details for the given blueprint of Mortgage product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalMortgageProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalMortgageProductResponse> GetExternalMortgageProductAsync(string productId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the blueprint of Mortgage product with the provided details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalMortgageProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalMortgageProductResponse> CreateExternalMortgageProductAsync(string productId, ExternalMortgageProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the given blueprint of Mortgage product with the specified details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalMortgageProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalMortgageProductResponse> UpdateExternalMortgageProductAsync(string productId, ExternalMortgageProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the product details for the given blueprint of Current Account product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalCurrentAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalCurrentAccountProductResponse> GetExternalCurrentAccountProductAsync(string productId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the blueprint of Current Account product with the provided details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalCurrentAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalCurrentAccountProductResponse> CreateExternalCurrentAccountProductAsync(string productId, ExternalCurrentAccountProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the given blueprint of  Current Account product with the specified details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalCurrentAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalCurrentAccountProductResponse> UpdateExternalCurrentAccountProductAsync(string productId, ExternalCurrentAccountProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the product details for the given blueprint of  Savings Account product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalSavingsAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalSavingsAccountProductResponse> GetExternalSavingsAccountProductAsync(string productId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the blueprint of Savings Account  product with the provided details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalSavingsAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalSavingsAccountProductResponse> CreateExternalSavingsAccountProductAsync(string productId, ExternalSavingsAccountProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the given blueprint of Savings Account product with the specified details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalSavingsAccountProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalSavingsAccountProductResponse> UpdateExternalSavingsAccountProductAsync(string productId, ExternalSavingsAccountProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates the  blueprint  of Deposit product wih the provided details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalDepositProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalDepositProductResponse> CreateExternalDepositProductAsync(string productId, ExternalDepositProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the given blueprint of  Deposit product with specified details</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="payload">body Payload</param>
        /// <param name="validate_only">The identifier to indicate if it is set to only validate or not.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalDepositProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalDepositProductResponse> UpdateExternalDepositProductAsync(string productId, ExternalDepositProduct payload, bool? validate_only = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the product details of the given  blueprint of  Deposit product</summary>
        /// <param name="productId">Contains the unique identifier of the product, e.g. the product id of the arrangement account.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <returns>ExternalDepositProductResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalDepositProductResponse> GetExternalDepositProductAsync(string productId, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayloadHeader 
    {
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Override? Override { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalMortgageProduct</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalMortgageProduct 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalMortgageProductBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalMortgageProductBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("principals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Principals>? Principals { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the term of the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the period after which if full committed deposit amount is not paid by the customer, then system shall trigger cancellation of deposits. For lending , cancel arrangement activity will be triggered if the loan amount is not disbursed fully</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCancelPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCancelPeriod { get; set; }= default!;
    
        /// <summary>Indicates the number of days to be considered for closure of account after renewal or rollover date for the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCoolingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCoolingPeriod { get; set; }= default!;
    
        /// <summary>Indicates the maximum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("minCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MinCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the minimum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaxCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the new arrangement creation</summary>
        [Newtonsoft.Json.JsonProperty("newarrfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NewarrfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the payoff</summary>
        [Newtonsoft.Json.JsonProperty("payofffeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayofffeeFixedAmount { get; set; }= default!;
    
        /// <summary>Determines whether the product change should happen within the given period or on reaching maturity of the arrangement</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangeDateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RenewalChangeDateType { get; set; }= default!;
    
        /// <summary>Denotes the period after which the user can change the arrangement from one product to another</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenewalChangePeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenHeader 
    {
        /// <summary>The Identifier of the record created</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The status of the record</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The status of the transaction</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionStatus { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit2? Audit { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalMortgageProductResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalMortgageProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalMortgageProductResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalMortgageProductResponseBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames2>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations2>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses2>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels2>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("principals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Principals2>? Principals { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules2>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the term of the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the period after which if full committed deposit amount is not paid by the customer, then system shall trigger cancellation of deposits. For lending , cancel arrangement activity will be triggered if the loan amount is not disbursed fully</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCancelPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCancelPeriod { get; set; }= default!;
    
        /// <summary>Indicates the number of days to be considered for closure of account after renewal or rollover date for the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCoolingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCoolingPeriod { get; set; }= default!;
    
        /// <summary>Indicates the maximum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("minCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MinCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the minimum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaxCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the new arrangement creation</summary>
        [Newtonsoft.Json.JsonProperty("newarrfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NewarrfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the payoff</summary>
        [Newtonsoft.Json.JsonProperty("payofffeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayofffeeFixedAmount { get; set; }= default!;
    
        /// <summary>Determines whether the product change should happen within the given period or on reaching maturity of the arrangement</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangeDateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RenewalChangeDateType { get; set; }= default!;
    
        /// <summary>Denotes the period after which the user can change the arrangement from one product to another</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenewalChangePeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideBody 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    /// <summary>ScreenErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenErrorResponseBody? Error { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideBody? Override { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScreenErrorResponseBody 
    {
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetails>? ErrorDetails { get; set; }= default!;
    
        /// <summary>The identifier of error type</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalCurrentAccountProduct</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalCurrentAccountProduct 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalCurrentAccountProductBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalCurrentAccountProductBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames3>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations3>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses3>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels3>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("creditInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditInterests>? CreditInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("debitInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DebitInterests>? DebitInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules3>? Schedules { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("periodiccharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Periodiccharges>? Periodiccharges { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for cheque withdrawal</summary>
        [Newtonsoft.Json.JsonProperty("chequewdFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChequewdFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the highest debit</summary>
        [Newtonsoft.Json.JsonProperty("highestdebitFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HighestdebitFixedAmount { get; set; }= default!;
    
        /// <summary>Identifies on which balance, overdraft and limit checking should be made</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityCreditCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityCreditCheck { get; set; }= default!;
    
        /// <summary>Identifies the options available for building the available balance on an account</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityAvailBalanceUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityAvailBalanceUpdate { get; set; }= default!;
    
        /// <summary>Indicates if the account supports NSF processing or not</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityOverdraftProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityOverdraftProcessing { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for  visa card issuing</summary>
        [Newtonsoft.Json.JsonProperty("cardissuefeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CardissuefeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for limit utilization</summary>
        [Newtonsoft.Json.JsonProperty("limitfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LimitfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for overdraft transaction</summary>
        [Newtonsoft.Json.JsonProperty("payfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed  for rejecting unauthorized overdraft transactionsthe payoff</summary>
        [Newtonsoft.Json.JsonProperty("returnfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReturnfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the reversal credit of a NSF charge</summary>
        [Newtonsoft.Json.JsonProperty("nsfreversalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NsfreversalfeeFixedAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalCurrentAccountProductResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalCurrentAccountProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalCurrentAccountProductResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalCurrentAccountProductResponseBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames4>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations4>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses4>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels4>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("creditInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditInterests2>? CreditInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("debitInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DebitInterests2>? DebitInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules4>? Schedules { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("periodiccharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Periodiccharges2>? Periodiccharges { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for cheque withdrawal</summary>
        [Newtonsoft.Json.JsonProperty("chequewdFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChequewdFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the highest debit</summary>
        [Newtonsoft.Json.JsonProperty("highestdebitFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HighestdebitFixedAmount { get; set; }= default!;
    
        /// <summary>Identifies on which balance, overdraft and limit checking should be made</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityCreditCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityCreditCheck { get; set; }= default!;
    
        /// <summary>Identifies the options available for building the available balance on an account</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityAvailBalanceUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityAvailBalanceUpdate { get; set; }= default!;
    
        /// <summary>Indicates if the account supports NSF processing or not</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityOverdraftProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityOverdraftProcessing { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for  visa card issuing</summary>
        [Newtonsoft.Json.JsonProperty("cardissuefeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CardissuefeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for limit utilization</summary>
        [Newtonsoft.Json.JsonProperty("limitfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LimitfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for overdraft transaction</summary>
        [Newtonsoft.Json.JsonProperty("payfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed  for rejecting unauthorized overdraft transactionsthe payoff</summary>
        [Newtonsoft.Json.JsonProperty("returnfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReturnfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the reversal credit of a NSF charge</summary>
        [Newtonsoft.Json.JsonProperty("nsfreversalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NsfreversalfeeFixedAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalSavingsAccountProduct</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalSavingsAccountProduct 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalSavingsAccountProductBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalSavingsAccountProductBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames5>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations5>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses5>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels5>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("creditInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditInterests3>? CreditInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules5>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Identifies on which balance, overdraft and limit checking should be made</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityCreditCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityCreditCheck { get; set; }= default!;
    
        /// <summary>Identifies the options available for building the available balance on an account</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityAvailBalanceUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityAvailBalanceUpdate { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for limit utilization</summary>
        [Newtonsoft.Json.JsonProperty("limitfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LimitfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for overdraft transaction</summary>
        [Newtonsoft.Json.JsonProperty("payfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed  for rejecting unauthorized overdraft transactionsthe payoff</summary>
        [Newtonsoft.Json.JsonProperty("returnfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReturnfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the reversal credit of a NSF charge</summary>
        [Newtonsoft.Json.JsonProperty("nsfreversalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NsfreversalfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed amount that will be charged if minimum balance is not maintained in the account</summary>
        [Newtonsoft.Json.JsonProperty("minbalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinbalfeeFixedAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalSavingsAccountProductResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalSavingsAccountProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalSavingsAccountProductResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalSavingsAccountProductResponseBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames6>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations6>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses6>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels6>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("creditInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditInterests4>? CreditInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules6>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Identifies on which balance, overdraft and limit checking should be made</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityCreditCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityCreditCheck { get; set; }= default!;
    
        /// <summary>Identifies the options available for building the available balance on an account</summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailabilityAvailBalanceUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BalanceAvailabilityAvailBalanceUpdate { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for limit utilization</summary>
        [Newtonsoft.Json.JsonProperty("limitfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LimitfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for overdraft transaction</summary>
        [Newtonsoft.Json.JsonProperty("payfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PayfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed  for rejecting unauthorized overdraft transactionsthe payoff</summary>
        [Newtonsoft.Json.JsonProperty("returnfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReturnfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the monetary amount that is fixed for the reversal credit of a NSF charge</summary>
        [Newtonsoft.Json.JsonProperty("nsfreversalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NsfreversalfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed amount that will be charged if minimum balance is not maintained in the account</summary>
        [Newtonsoft.Json.JsonProperty("minbalfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinbalfeeFixedAmount { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalDepositProduct</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalDepositProduct 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayloadHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalDepositProductBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalDepositProductBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames7>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations7>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses7>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels7>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("depositInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DepositInterests>? DepositInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules7>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the total amount which will be lent or deposited for the term</summary>
        [Newtonsoft.Json.JsonProperty("commitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the term of the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTerm { get; set; }= default!;
    
        /// <summary>Denotes the tolerance value in days to indicate that term will be recalculated only if adjustment in maturity date is greater than the tolerance days speficied</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTermTolDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTermTolDays { get; set; }= default!;
    
        /// <summary>Indicates the period after which if full committed deposit amount is not paid by the customer, then system shall trigger cancellation of deposits. For lending , cancel arrangement activity will be triggered if the loan amount is not disbursed fully</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCancelPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCancelPeriod { get; set; }= default!;
    
        /// <summary>Indicates the number of days to be considered for closure of account after renewal or rollover date for the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCoolingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCoolingPeriod { get; set; }= default!;
    
        /// <summary>Indicates the minimum commitment amount</summary>
        [Newtonsoft.Json.JsonProperty("minCommitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinCommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum commitment amount</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxCommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the minimum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaxCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed amount charged for the ealry redemption</summary>
        [Newtonsoft.Json.JsonProperty("redemptionfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RedemptionfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Determines whether the product change should happen within the given period or on reaching maturity of the arrangement</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangeDateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RenewalChangeDateType { get; set; }= default!;
    
        /// <summary>Denotes the period after which the user can change the arrangement from one product to another</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenewalChangePeriod { get; set; }= default!;
    
    
    }
    
    /// <summary>ExternalDepositProductResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalDepositProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalDepositProductResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalDepositProductResponseBody 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayNames8>? DisplayNames { get; set; }= default!;
    
        /// <summary>Indicates the product availability for organization</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organizations8>? Organizations { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("lineOfBusinesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LineOfBusinesses8>? LineOfBusinesses { get; set; }= default!;
    
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Channels8>? Channels { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("depositInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DepositInterests2>? DepositInterests { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("schedules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schedules8>? Schedules { get; set; }= default!;
    
        /// <summary>The description of the Option</summary>
        [Newtonsoft.Json.JsonProperty("optionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OptionDescription { get; set; }= default!;
    
        /// <summary>Indicates an id or name of a product</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; }= default!;
    
        /// <summary>The date when the product is available for creating arrangements</summary>
        [Newtonsoft.Json.JsonProperty("availableFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AvailableFromDate { get; set; }= default!;
    
        /// <summary>The date an agreement such as a credit facility or limit is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format</summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }= default!;
    
        /// <summary>Identifies the currency. E.g. USD, GBP etc</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }= default!;
    
        /// <summary>Additional product specification based on particular criteria for example the account was opened on-line and attracted a higher interest rate. Drop down list to select appropriate variation or applied automatically</summary>
        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variation { get; set; }= default!;
    
        /// <summary>Indicates the total amount which will be lent or deposited for the term</summary>
        [Newtonsoft.Json.JsonProperty("commitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the term of the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTerm { get; set; }= default!;
    
        /// <summary>Denotes the tolerance value in days to indicate that term will be recalculated only if adjustment in maturity date is greater than the tolerance days speficied</summary>
        [Newtonsoft.Json.JsonProperty("commitmentTermTolDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentTermTolDays { get; set; }= default!;
    
        /// <summary>Indicates the period after which if full committed deposit amount is not paid by the customer, then system shall trigger cancellation of deposits. For lending , cancel arrangement activity will be triggered if the loan amount is not disbursed fully</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCancelPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCancelPeriod { get; set; }= default!;
    
        /// <summary>Indicates the number of days to be considered for closure of account after renewal or rollover date for the commitment</summary>
        [Newtonsoft.Json.JsonProperty("commitmentCoolingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitmentCoolingPeriod { get; set; }= default!;
    
        /// <summary>Indicates the minimum commitment amount</summary>
        [Newtonsoft.Json.JsonProperty("minCommitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinCommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the maximum commitment amount</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxCommitmentAmount { get; set; }= default!;
    
        /// <summary>Indicates the minimum term to which commitment is capped</summary>
        [Newtonsoft.Json.JsonProperty("maxCommitmentTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaxCommitmentTerm { get; set; }= default!;
    
        /// <summary>Indicates the fixed management fee</summary>
        [Newtonsoft.Json.JsonProperty("mgmtfeesFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MgmtfeesFixedAmount { get; set; }= default!;
    
        /// <summary>Indicates the fixed amount charged for the ealry redemption</summary>
        [Newtonsoft.Json.JsonProperty("redemptionfeeFixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RedemptionfeeFixedAmount { get; set; }= default!;
    
        /// <summary>Determines whether the product change should happen within the given period or on reaching maturity of the arrangement</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangeDateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RenewalChangeDateType { get; set; }= default!;
    
        /// <summary>Denotes the period after which the user can change the arrangement from one product to another</summary>
        [Newtonsoft.Json.JsonProperty("renewalChangePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenewalChangePeriod { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Override 
    {
        [Newtonsoft.Json.JsonProperty("overrideDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverrideDetails2>? OverrideDetails { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Principals 
    {
        /// <summary>A fixed rate is directly entered by the user specifying the Defined Property and is not defined by an index table.Three basic types of interest are supported by T24; Fixed, Floating, and Periodic. </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>Indicates the payment method associated</summary>
        [Newtonsoft.Json.JsonProperty("schedulepPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepPaymentMethod { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties>? ScheduleProperties { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleDates>? ScheduleDates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("parse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Parse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames2 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations2 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses2 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels2 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Principals2 
    {
        /// <summary>A fixed rate is directly entered by the user specifying the Defined Property and is not defined by an index table.Three basic types of interest are supported by T24; Fixed, Floating, and Periodic. </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules2 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>Indicates the payment method associated</summary>
        [Newtonsoft.Json.JsonProperty("schedulepPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepPaymentMethod { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties2>? ScheduleProperties { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleDates2>? ScheduleDates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit3 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("parse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Parse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails 
    {
        /// <summary>The identifier of the override</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDetails 
    {
        /// <summary>The name of the field</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldName { get; set; }= default!;
    
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames3 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations3 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses3 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineofBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineofBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels3 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreditInterests 
    {
        /// <summary>Indicates the fixed rate for credit interest</summary>
        [Newtonsoft.Json.JsonProperty("creditInterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreditInterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DebitInterests 
    {
        /// <summary>Indicates the fixed rate for the debit interest</summary>
        [Newtonsoft.Json.JsonProperty("debitInterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DebitInterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules3 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Periodiccharges 
    {
        /// <summary>Indicates the currency for the periodic charge</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PeriodicchargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the maximum charge amount that can be specified for the associated currency attribute</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeMaxChgAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodicchargeMaxChgAmount { get; set; }= default!;
    
        /// <summary>Indicates the minimum charge amount that can be specified for the associated currency attribute</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeMinChgAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodicchargeMinChgAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames4 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations4 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses4 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineofBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineofBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels4 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreditInterests2 
    {
        /// <summary>Indicates the fixed rate for credit interest</summary>
        [Newtonsoft.Json.JsonProperty("creditInterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreditInterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DebitInterests2 
    {
        /// <summary>Indicates the fixed rate for the debit interest</summary>
        [Newtonsoft.Json.JsonProperty("debitInterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DebitInterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules4 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Periodiccharges2 
    {
        /// <summary>Indicates the currency for the periodic charge</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PeriodicchargeCurrency { get; set; }= default!;
    
        /// <summary>Indicates the maximum charge amount that can be specified for the associated currency attribute</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeMaxChgAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodicchargeMaxChgAmount { get; set; }= default!;
    
        /// <summary>Indicates the minimum charge amount that can be specified for the associated currency attribute</summary>
        [Newtonsoft.Json.JsonProperty("periodicchargeMinChgAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PeriodicchargeMinChgAmount { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames5 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations5 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses5 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels5 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreditInterests3 
    {
        /// <summary>Indicates the fixed rate for the credit interest</summary>
        [Newtonsoft.Json.JsonProperty("crinterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CrinterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules5 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties3>? ScheduleProperties { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames6 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations6 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses6 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels6 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreditInterests4 
    {
        /// <summary>Indicates the fixed rate for the credit interest</summary>
        [Newtonsoft.Json.JsonProperty("crinterestFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CrinterestFixedRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules6 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties4>? ScheduleProperties { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames7 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations7 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses7 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels7 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DepositInterests 
    {
        /// <summary>Indicates the fixed rate for deposit interest</summary>
        [Newtonsoft.Json.JsonProperty("depositintFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositintFixedRate { get; set; }= default!;
    
        /// <summary>The negative rate that can be applied for each tier for deposit interest condition</summary>
        [Newtonsoft.Json.JsonProperty("depositintTierNegativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositintTierNegativeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules7 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>Indicates the payment method associated</summary>
        [Newtonsoft.Json.JsonProperty("schedulepPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepPaymentMethod { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties5>? ScheduleProperties { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleDates3>? ScheduleDates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayNames8 
    {
        /// <summary>The name used for display purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organizations8 
    {
        /// <summary>Indicates the level of the organization</summary>
        [Newtonsoft.Json.JsonProperty("organizationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationLevel { get; set; }= default!;
    
        /// <summary>Indicates the organization code within the associated Level</summary>
        [Newtonsoft.Json.JsonProperty("organizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationCode { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("organizationExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LineOfBusinesses8 
    {
        /// <summary>Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusiness { get; set; }= default!;
    
        /// <summary>Indicates whether the organisation is excluded.By default,it will be included</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LineOfBusinessExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Channels8 
    {
        /// <summary>Indicates the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Channel { get; set; }= default!;
    
        /// <summary>Indicates whether the channel is excluded.By default, it will be included</summary>
        [Newtonsoft.Json.JsonProperty("channelExclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ChannelExclude { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DepositInterests2 
    {
        /// <summary>Indicates the fixed rate for deposit interest</summary>
        [Newtonsoft.Json.JsonProperty("depositintFixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositintFixedRate { get; set; }= default!;
    
        /// <summary>The negative rate that can be applied for each tier for deposit interest condition</summary>
        [Newtonsoft.Json.JsonProperty("depositintTierNegativeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DepositintTierNegativeRate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Schedules8 
    {
        /// <summary>The payment schedule type</summary>
        [Newtonsoft.Json.JsonProperty("schedulePaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulePaymentType { get; set; }= default!;
    
        /// <summary>Indicates the payment method associated</summary>
        [Newtonsoft.Json.JsonProperty("schedulepPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepPaymentMethod { get; set; }= default!;
    
        /// <summary>The frequency of the payment schedule</summary>
        [Newtonsoft.Json.JsonProperty("schedulepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchedulepaymentFrequency { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleProperties6>? ScheduleProperties { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("scheduleDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleDates4>? ScheduleDates { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OverrideDetails2 
    {
        /// <summary>The identifier of the override.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }= default!;
    
        /// <summary>The actual override message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }= default!;
    
        /// <summary>The code related to override message.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The user input to accept/reject the override.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResponseCode { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleDates 
    {
        /// <summary>Indicates the start date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleStartDate { get; set; }= default!;
    
        /// <summary>Indicates the end date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleEndDate { get; set; }= default!;
    
        /// <summary>Indicates the actual schedule amount</summary>
        [Newtonsoft.Json.JsonProperty("scheduleActualAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleActualAmt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties2 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleDates2 
    {
        /// <summary>Indicates the start date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleStartDate { get; set; }= default!;
    
        /// <summary>Indicates the end date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleEndDate { get; set; }= default!;
    
        /// <summary>Indicates the actual schedule amount</summary>
        [Newtonsoft.Json.JsonProperty("scheduleActualAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleActualAmt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties3 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties4 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties5 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleDates3 
    {
        /// <summary>Indicates the start date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleStartDate { get; set; }= default!;
    
        /// <summary>Indicates the end date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleEndDate { get; set; }= default!;
    
        /// <summary>Indicates the actual schedule amount</summary>
        [Newtonsoft.Json.JsonProperty("scheduleActualAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleActualAmt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleProperties6 
    {
        /// <summary>The payment schedule property</summary>
        [Newtonsoft.Json.JsonProperty("scheduleProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleProperty { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleDates4 
    {
        /// <summary>Indicates the start date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleStartDate { get; set; }= default!;
    
        /// <summary>Indicates the end date of the schedule</summary>
        [Newtonsoft.Json.JsonProperty("scheduleEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduleEndDate { get; set; }= default!;
    
        /// <summary>Indicates the actual schedule amount</summary>
        [Newtonsoft.Json.JsonProperty("scheduleActualAmt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScheduleActualAmt { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016