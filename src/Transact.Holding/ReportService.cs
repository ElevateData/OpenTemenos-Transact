//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using OpenTemenos.Shared.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace OpenTemenos.Transacts.Holding.Reports
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IReportService
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the realized and unrealised mark to market details</summary>
        /// <param name="dealer">The dealer/desk responsible for monitoring and managing the currency position</param>
        /// <param name="groupId">Unique ID of the group</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>ProfitabilityReportResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProfitabilityReportResponse> GetProfitabilityReportAsync(string? dealer = null, string? groupId = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the position details for all the currencies in different calenders</summary>
        /// <param name="currency">Identifies the currency. E.g. USD, GBP etc</param>
        /// <param name="company">The company code</param>
        /// <param name="positionType">Identifies the position type. Possible values are CAS(cash position), GAP(Interest mismatch position), FXP(Foreign exchange position)</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="valueDateFrom">Contains the from value of value date to be specified in a range.</param>
        /// <param name="valueDateTo">Contains the to value of value date to be specified in a range.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="period">Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc.</param>
        /// <param name="calendar">Identifies the calendar to be used for the spreading of different position data into different time buckets. Ex: CAL-Standard calendar and DE1-Deutsche calendar</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>CurrencyCalendarPositionsReportResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyCalendarPositionsReportResponse> GetCurrencyCalendarPositionsReportAsync(string? currency = null, string? company = null, string? positionType = null, string? dealerDesk = null, string? valueDate = null, string? valueDateFrom = null, string? valueDateTo = null, string? dealDate = null, string? period = null, string? calendar = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all the active(open) deals</summary>
        /// <param name="contractId">Indicates the unique identifier of the transaction or contract which initiated the activity</param>
        /// <param name="counterpartyId">The identifier of the counter party</param>
        /// <param name="counterpartyName">The counterparty name for the forex deal.</param>
        /// <param name="dealType">Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</param>
        /// <param name="dealSubType">Under a deal type, there can be further sub deal types. E.g. Broker and Internal are sub deal types for FX spot and forward deal types.</param>
        /// <param name="buyAmount">Amount bought in the FX deal.</param>
        /// <param name="buyAmountFrom">Contains the from value of buy amount to be specified in a range.</param>
        /// <param name="buyAmountTo">Contains the to value of buy amount to be specified in a range.</param>
        /// <param name="buyCurrency">ISO Currency code for the bought currency.</param>
        /// <param name="buyRate">The exchange rate at which is currency is bought.</param>
        /// <param name="buyRateFrom">Contains the from value of buy rate to be specified in a range.</param>
        /// <param name="buyRateTo">Contains the to value of buy rate to be specified in a range.</param>
        /// <param name="sellAmount">Amount sold in the FX deal.</param>
        /// <param name="sellAmountFrom">Contains the from value of sell amount to be specified in a range.</param>
        /// <param name="sellAmountTo">Contains the to value of sell amount to be specified in a range.</param>
        /// <param name="sellCurrency">ISO Currency code for the sold currency.</param>
        /// <param name="sellRate">The exchange rate at which is currency is sold.</param>
        /// <param name="sellRateFrom">Contains the from value of sell rate to be specified in a range.</param>
        /// <param name="sellRateTo">Contains the to value of sell rate to be specified in a range.</param>
        /// <param name="valueDate">Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</param>
        /// <param name="valueDateFrom">Contains the from value of value date to be specified in a range.</param>
        /// <param name="valueDateTo">Contains the to value of value date to be specified in a range.</param>
        /// <param name="reutersDealId">The Reuters deal reference number, if the deal is booked on Reuters dealing platform.</param>
        /// <param name="maturityDate">Indicates maturity date of the contract</param>
        /// <param name="maturityDateFrom">Contains the from value of maturity date to be specified in a range.</param>
        /// <param name="maturityDateTo">Contains the to value of maturity date to be specified in a range.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="dealDateFrom">Date on which the deal was agreed.</param>
        /// <param name="dealDateTo">Date on which the deal was agreed.</param>
        /// <param name="instrument">The instrument identifier</param>
        /// <param name="issuedBy">The issuer of a security or a bond.</param>
        /// <param name="portfolio">Id of the portfolio (security account), which the arrangement (account, deposit, loan, etc.) is attached to.</param>
        /// <param name="depository">Person designated as depository by the company in or pursuant to this Indenture, and, unless otherwise provided with respect to any security, any successor to such person</param>
        /// <param name="inputter">The user identifier who input the transaction</param>
        /// <param name="broker">Broker involved in the transaction</param>
        /// <param name="method">A pricing plan can be applied to an account, the selection is automatic or manual</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="internalDealerDesk">One of the dealer/desk for an internal deal between two dealer/desks.</param>
        /// <param name="displayName">Contains the name used for display or enrichment purposes</param>
        /// <param name="orderStatus">Status of the order.</param>
        /// <param name="buyOrSell">Whether the transaction is a buy or a sell.</param>
        /// <param name="recordStatus">General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</param>
        /// <param name="contractStatus">Status of the contract, e.g. open, matured or liquidated.</param>
        /// <param name="dateTime">Contains the date and time separated by '-'</param>
        /// <param name="dateTimeFrom">Contains the from value of date and time to be specified in a range.</param>
        /// <param name="dateTimeTo">Contains the to value of date and time to be specified in a range.</param>
        /// <param name="fixingExerciseDate">Fixing or Exercise Date for FRA deal.</param>
        /// <param name="fixingExerciseDateFrom">Contains the from value of fixing or exercise date to be specified in a range.</param>
        /// <param name="fixingExerciseDateTo">Contains the to value of fixing or exercise date to be specified in a range.</param>
        /// <param name="rateKey">Identifies the periodic interest key used in case of money market deals or on the asset side of swap contract.</param>
        /// <param name="liabilityRateKey">Identifies the periodic interest key used on the liability side of swap contract.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>BlotterReportResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BlotterReportResponse> GetBlotterReportAsync(string? contractId = null, string? counterpartyId = null, string? counterpartyName = null, string? dealType = null, string? dealSubType = null, string? buyAmount = null, string? buyAmountFrom = null, string? buyAmountTo = null, string? buyCurrency = null, string? buyRate = null, string? buyRateFrom = null, string? buyRateTo = null, string? sellAmount = null, string? sellAmountFrom = null, string? sellAmountTo = null, string? sellCurrency = null, string? sellRate = null, string? sellRateFrom = null, string? sellRateTo = null, string? valueDate = null, string? valueDateFrom = null, string? valueDateTo = null, string? reutersDealId = null, string? maturityDate = null, string? maturityDateFrom = null, string? maturityDateTo = null, string? dealDate = null, string? dealDateFrom = null, string? dealDateTo = null, string? instrument = null, string? issuedBy = null, string? portfolio = null, string? depository = null, string? inputter = null, string? broker = null, string? method = null, string? dealerDesk = null, string? internalDealerDesk = null, string? displayName = null, string? orderStatus = null, string? buyOrSell = null, string? recordStatus = null, string? contractStatus = null, string? dateTime = null, string? dateTimeFrom = null, string? dateTimeTo = null, string? fixingExerciseDate = null, string? fixingExerciseDateFrom = null, string? fixingExerciseDateTo = null, string? rateKey = null, string? liabilityRateKey = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all events till date of money market deals.</summary>
        /// <param name="contractId">Indicates the unique identifier of the transaction or contract which initiated the activity</param>
        /// <param name="transactionDate">Contains the date on which the deal was booked.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>MoneyMarketEventsToDateResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MoneyMarketEventsToDateResponse> GetMoneyMarketEventsToDateAsync(string? contractId = null, string? transactionDate = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all the foreign exchange active deals as on today</summary>
        /// <param name="dealType">Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</param>
        /// <param name="counterparty">The counterparty ID  for the  deal.</param>
        /// <param name="transactionReference">Contains the identifier for the transaction in the core system</param>
        /// <param name="swapReference">As the near and far leg of the swap have separate reference number, the swap reference is the near leg reference in the far leg and far leg reference in the near leg of a FX swap deal.</param>
        /// <param name="settlementDateSell">Settlement date for sell side.</param>
        /// <param name="settlementDateBuy">Settlement date for buy side.</param>
        /// <param name="buyCurrency">ISO Currency code for the bought currency.</param>
        /// <param name="buyAmount">Amount bought in the FX deal.</param>
        /// <param name="sellCurrency">ISO Currency code for the sold currency.</param>
        /// <param name="sellAmount">Amount sold in the FX deal.</param>
        /// <param name="dealDate">Date on which the deal was agreed.</param>
        /// <param name="ourAccountPay">Account from which payment is  made.</param>
        /// <param name="ourAccountRecieve">Account from which payment is received.</param>
        /// <param name="dealerDesk">The dealer/desk responsible for monitoring and managing the currency positions.</param>
        /// <param name="unevenSwap">Identifier for a FX uneven swap  (the swap base currency amount in near and far leg are not the same).</param>
        /// <param name="forwardForwardSwap">A FX swap where both the near and the far leg have a value date greater than spot value date.</param>
        /// <param name="page_size">The total number of records per page</param>
        /// <param name="page_start">The record from which the response should be displayed</param>
        /// <param name="page_token">Unique id expected to get as part of response from t24 on every enquiry request.</param>
        /// <param name="credentials">Username and password to authenticate the API against core-banking.</param>
        /// <param name="companyId">Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001.</param>
        /// <param name="deviceId">Identifies the device type</param>
        /// <param name="userRole">User who initiated the transaction</param>
        /// <param name="disablePagination">Indicates the pagination header attributes availability. If set to 'true', it fetches all the data</param>
        /// <returns>OutstandingForexDealsTodayResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OutstandingForexDealsTodayResponse> GetOutstandingForexDealsTodayAsync(string? dealType = null, string? counterparty = null, string? transactionReference = null, string? swapReference = null, string? settlementDateSell = null, string? settlementDateBuy = null, string? buyCurrency = null, string? buyAmount = null, string? sellCurrency = null, string? sellAmount = null, string? dealDate = null, string? ourAccountPay = null, string? ourAccountRecieve = null, string? dealerDesk = null, string? unevenSwap = null, string? forwardForwardSwap = null, int? page_size = null, int? page_start = null, string? page_token = null, string? credentials = null, string? companyId = null, string? deviceId = null, string? userRole = null, bool? disablePagination = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryHeader 
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Audit? Audit { get; set; }= default!;
    
        /// <summary>Status of the API(success/failed)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }= default!;
    
        /// <summary>The total number of records per page</summary>
        [Newtonsoft.Json.JsonProperty("page_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_size { get; set; }= default!;
    
        /// <summary>The record from which the response should be displayed</summary>
        [Newtonsoft.Json.JsonProperty("page_start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page_start { get; set; }= default!;
    
        /// <summary>The total number of records present</summary>
        [Newtonsoft.Json.JsonProperty("total_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_size { get; set; }= default!;
    
        /// <summary>Unique id expected to get as part of response from t24 on every enquiry request</summary>
        [Newtonsoft.Json.JsonProperty("page_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Page_token { get; set; }= default!;
    
    
    }
    
    /// <summary>ProfitabilityReportResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProfitabilityReportResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfitabilityReportResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProfitabilityReportResponseBody : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    /// <summary>BusinessQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message for bad requests</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: Business</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>SystemQueryErrorResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemQueryErrorResponseBody? Error { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SystemQueryErrorResponseBody 
    {
        /// <summary>The identifier of the error message</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }= default!;
    
        /// <summary>The actual t24 error message caused by server</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }= default!;
    
        /// <summary>The identifier of error type: System</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }= default!;
    
    
    }
    
    /// <summary>CurrencyCalendarPositionsReportResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCalendarPositionsReportResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyCalendarPositionsReportResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCalendarPositionsReportResponseBody : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>BlotterReportResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BlotterReportResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlotterReportResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BlotterReportResponseBody : System.Collections.ObjectModel.Collection<Anonymous3>
    {
    
    }
    
    /// <summary>MoneyMarketEventsToDateResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MoneyMarketEventsToDateResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoneyMarketEventsToDateResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MoneyMarketEventsToDateResponseBody : System.Collections.ObjectModel.Collection<Anonymous4>
    {
    
    }
    
    /// <summary>OutstandingForexDealsTodayResponse</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OutstandingForexDealsTodayResponse 
    {
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryHeader? Header { get; set; }= default!;
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutstandingForexDealsTodayResponseBody? Body { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OutstandingForexDealsTodayResponseBody : System.Collections.ObjectModel.Collection<Anonymous5>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The name that is displayed for the group</summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GroupName { get; set; }= default!;
    
        /// <summary>Identifies the dealer/ desk responsible for monitoring and managing currency positions.</summary>
        [Newtonsoft.Json.JsonProperty("dealerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DealerId { get; set; }= default!;
    
        /// <summary>Period represented by the beginning of the year till previous month end.</summary>
        [Newtonsoft.Json.JsonProperty("yearToMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? YearToMonth { get; set; }= default!;
    
        /// <summary>The calculated value for the period  from the first of the month till current date.</summary>
        [Newtonsoft.Json.JsonProperty("monthToDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MonthToDate { get; set; }= default!;
    
        /// <summary>The calculated value for the period from the beginning of the year till current date.</summary>
        [Newtonsoft.Json.JsonProperty("yearToDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? YearToDate { get; set; }= default!;
    
        /// <summary>The amount of unrealised profit and loss calculated as a result of mark to market revaluation</summary>
        [Newtonsoft.Json.JsonProperty("unrealizedMarkToMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UnrealizedMarkToMarket { get; set; }= default!;
    
        /// <summary>Total for the period since the start of the year till date.</summary>
        [Newtonsoft.Json.JsonProperty("totalYearToDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalYearToDate { get; set; }= default!;
    
        /// <summary>Total for the period since the start of the year till date expressed in revaluation currency.</summary>
        [Newtonsoft.Json.JsonProperty("totalYearToDateRevalCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalYearToDateRevalCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Audit2 
    {
        /// <summary>Time taken to response by T24</summary>
        [Newtonsoft.Json.JsonProperty("T24_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? T24_time { get; set; }= default!;
    
        /// <summary>The CURR.NO. of the record</summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VersionNumber { get; set; }= default!;
    
        /// <summary>Time taken to parse the request by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("requestParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RequestParse_time { get; set; }= default!;
    
        /// <summary>Time taken to parse the response by IRIS</summary>
        [Newtonsoft.Json.JsonProperty("responseParse_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ResponseParse_time { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous2 
    {
        /// <summary>The calendar period used for consolidating the data into different time buckets.</summary>
        [Newtonsoft.Json.JsonProperty("calendarPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? CalendarPeriod { get; set; }= default!;
    
        /// <summary>Currency position amount over bought.</summary>
        [Newtonsoft.Json.JsonProperty("longPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? LongPosition { get; set; }= default!;
    
        /// <summary>Oversold position in a currency.</summary>
        [Newtonsoft.Json.JsonProperty("shortPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ShortPosition { get; set; }= default!;
    
        /// <summary>Net of buy and sell positions.</summary>
        [Newtonsoft.Json.JsonProperty("netPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NetPosition { get; set; }= default!;
    
        /// <summary>The weighted average rate.</summary>
        [Newtonsoft.Json.JsonProperty("averageRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? AverageRate { get; set; }= default!;
    
        /// <summary>Prevailing rate in the market.</summary>
        [Newtonsoft.Json.JsonProperty("marketRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? MarketRate { get; set; }= default!;
    
        /// <summary>The amount of unrealised profit and loss calculated as a result of mark to market revaluation</summary>
        [Newtonsoft.Json.JsonProperty("unrealizedMarkToMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UnrealizedMarkToMarket { get; set; }= default!;
    
        /// <summary>The currency in which a net position value is expressed.</summary>
        [Newtonsoft.Json.JsonProperty("netPositionCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? NetPositionCurrency { get; set; }= default!;
    
        /// <summary>Currency in which the unrealised profit &amp; Loss is expressed.</summary>
        [Newtonsoft.Json.JsonProperty("unrealizedMarkToMarketCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? UnrealizedMarkToMarketCurrency { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous3 
    {
        /// <summary>Indicates the unique identifier of the transaction or contract which initiated the activity</summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string? ContractId { get; set; }= default!;
    
        /// <summary>The identifier of the counter party</summary>
        [Newtonsoft.Json.JsonProperty("counterpartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? CounterpartyId { get; set; }= default!;
    
        /// <summary>The counterparty name for the forex deal.</summary>
        [Newtonsoft.Json.JsonProperty("counterpartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CounterpartyName { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [Newtonsoft.Json.JsonProperty("dealType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>Under a deal type, there can be further sub deal types. E.g. Broker and Internal are sub deal types for FX spot and forward deal types.</summary>
        [Newtonsoft.Json.JsonProperty("dealSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DealSubType { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [Newtonsoft.Json.JsonProperty("buyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [Newtonsoft.Json.JsonProperty("buyCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is bought.</summary>
        [Newtonsoft.Json.JsonProperty("buyRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? BuyRate { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [Newtonsoft.Json.JsonProperty("sellAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [Newtonsoft.Json.JsonProperty("sellCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>The exchange rate at which is currency is sold.</summary>
        [Newtonsoft.Json.JsonProperty("sellRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? SellRate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? ValueDate { get; set; }= default!;
    
        /// <summary>The Reuters deal reference number, if the deal is booked on Reuters dealing platform.</summary>
        [Newtonsoft.Json.JsonProperty("reutersDealId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ReutersDealId { get; set; }= default!;
    
        /// <summary>Indicates maturity date of the contract</summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? MaturityDate { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [Newtonsoft.Json.JsonProperty("dealDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>The instrument identifier</summary>
        [Newtonsoft.Json.JsonProperty("instrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Instrument { get; set; }= default!;
    
        /// <summary>The issuer of a security or a bond.</summary>
        [Newtonsoft.Json.JsonProperty("issuedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? IssuedBy { get; set; }= default!;
    
        /// <summary>Id of the portfolio (security account), which the arrangement (account, deposit, loan, etc.) is attached to.</summary>
        [Newtonsoft.Json.JsonProperty("portfolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Portfolio { get; set; }= default!;
    
        /// <summary>Person designated as depository by the company in or pursuant to this Indenture, and, unless otherwise provided with respect to any security, any successor to such person</summary>
        [Newtonsoft.Json.JsonProperty("depository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Depository { get; set; }= default!;
    
        /// <summary>The user identifier who input the transaction</summary>
        [Newtonsoft.Json.JsonProperty("inputter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Inputter { get; set; }= default!;
    
        /// <summary>Broker involved in the transaction</summary>
        [Newtonsoft.Json.JsonProperty("broker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Broker { get; set; }= default!;
    
        /// <summary>A pricing plan can be applied to an account, the selection is automatic or manual</summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Method { get; set; }= default!;
    
        /// <summary>The dealer/desk responsible for monitoring and managing the currency positions.</summary>
        [Newtonsoft.Json.JsonProperty("dealerDesk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? DealerDesk { get; set; }= default!;
    
        /// <summary>One of the dealer/desk for an internal deal between two dealer/desks.</summary>
        [Newtonsoft.Json.JsonProperty("internalDealerDesk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? InternalDealerDesk { get; set; }= default!;
    
        /// <summary>Contains the name used for display or enrichment purposes</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? DisplayName { get; set; }= default!;
    
        /// <summary>Status of the order.</summary>
        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? OrderStatus { get; set; }= default!;
    
        /// <summary>Whether the transaction is a buy or a sell.</summary>
        [Newtonsoft.Json.JsonProperty("buyOrSell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? BuyOrSell { get; set; }= default!;
    
        /// <summary>General status of the record. Possible values: - null - authorised - IHLD - input, on hold - INAU - input, not authorised - INA2 - input, authorised, pending second authorisation - INAO - input, not authorised with blocking overrides - RNAU - reversed, not authorised - RNAO - reversed, not authorised with blocking overrides</summary>
        [Newtonsoft.Json.JsonProperty("recordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? RecordStatus { get; set; }= default!;
    
        /// <summary>Status of the contract, e.g. open, matured or liquidated.</summary>
        [Newtonsoft.Json.JsonProperty("contractStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? ContractStatus { get; set; }= default!;
    
        /// <summary>Contains the date and time separated by '-'</summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? DateTime { get; set; }= default!;
    
        /// <summary>Fixing or Exercise Date for FRA deal.</summary>
        [Newtonsoft.Json.JsonProperty("fixingExerciseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? FixingExerciseDate { get; set; }= default!;
    
        /// <summary>Identifies the periodic interest key used in case of money market deals or on the asset side of swap contract.</summary>
        [Newtonsoft.Json.JsonProperty("rateKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? RateKey { get; set; }= default!;
    
        /// <summary>Identifies the periodic interest key used on the liability side of swap contract.</summary>
        [Newtonsoft.Json.JsonProperty("liabilityRateKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string? LiabilityRateKey { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous4 
    {
        /// <summary>Identifies the sequence of the event.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 2D)]
        public double? Sequence { get; set; }= default!;
    
        /// <summary>Contains the date on which the deal was booked.</summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransactionDate { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Valid items for product alerts</summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? Event { get; set; }= default!;
    
        /// <summary>This is the payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 25D)]
        public double? Amount { get; set; }= default!;
    
        /// <summary>Specifies the name of the application to be considered for erasure of details for customer data protection purposes</summary>
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? ApplicationName { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [Newtonsoft.Json.JsonProperty("transactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionReference { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous5 
    {
        /// <summary>Account from which payment is  made.</summary>
        [Newtonsoft.Json.JsonProperty("ourAccountPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OurAccountPay>? OurAccountPay { get; set; }= default!;
    
        /// <summary>Account from which payment is received.</summary>
        [Newtonsoft.Json.JsonProperty("ourAccountRecieve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OurAccountRecieve>? OurAccountRecieve { get; set; }= default!;
    
        /// <summary>Contains the identifier for the transaction in the core system</summary>
        [Newtonsoft.Json.JsonProperty("transactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? TransactionReference { get; set; }= default!;
    
        /// <summary>Foreign Exchange deal type. Allowed values: - SP(spot) - FW(forward) - SW(Swap)</summary>
        [Newtonsoft.Json.JsonProperty("dealType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? DealType { get; set; }= default!;
    
        /// <summary>The counterparty ID  for the  deal.</summary>
        [Newtonsoft.Json.JsonProperty("counterparty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string? Counterparty { get; set; }= default!;
    
        /// <summary>The counterparty name for the forex deal.</summary>
        [Newtonsoft.Json.JsonProperty("counterpartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? CounterpartyName { get; set; }= default!;
    
        /// <summary>Date on which the deal was agreed. </summary>
        [Newtonsoft.Json.JsonProperty("dealDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string? DealDate { get; set; }= default!;
    
        /// <summary>ISO Currency code for the bought currency.  </summary>
        [Newtonsoft.Json.JsonProperty("buyCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? BuyCurrency { get; set; }= default!;
    
        /// <summary>Amount bought in the FX deal.</summary>
        [Newtonsoft.Json.JsonProperty("buyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? BuyAmount { get; set; }= default!;
    
        /// <summary>ISO Currency code for the sold currency.  </summary>
        [Newtonsoft.Json.JsonProperty("sellCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? SellCurrency { get; set; }= default!;
    
        /// <summary>Amount sold in the FX deal.</summary>
        [Newtonsoft.Json.JsonProperty("sellAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string? SellAmount { get; set; }= default!;
    
        /// <summary>Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)</summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValueDate { get; set; }= default!;
    
        /// <summary>Contains the exchange rate returned from the system. i.e. For entries over foreign currency accounts, this contains the rate which used to convert the currency amount to the local equivalent at the time of the originating transaction.</summary>
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExchangeRate { get; set; }= default!;
    
        /// <summary>Identifier for a FX uneven swap  (the swap base currency amount in near and far leg are not the same).</summary>
        [Newtonsoft.Json.JsonProperty("unevenSwap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string? UnevenSwap { get; set; }= default!;
    
        /// <summary>As the near and far leg of the swap have separate reference number, the swap reference is the near leg reference in the far leg and far leg reference in the near leg of a FX swap deal.</summary>
        [Newtonsoft.Json.JsonProperty("swapReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? SwapReference { get; set; }= default!;
    
        /// <summary>A FX swap where both the near and the far leg have a value date greater than spot value date.</summary>
        [Newtonsoft.Json.JsonProperty("forwardForwardSwap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ForwardForwardSwap { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OurAccountPay 
    {
        /// <summary>Account from which payment is  made.</summary>
        [Newtonsoft.Json.JsonProperty("ourAccountPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? OurAccountPay1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OurAccountRecieve 
    {
        /// <summary>Account from which payment is received.</summary>
        [Newtonsoft.Json.JsonProperty("ourAccountRecieve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string? OurAccountRecieve1 { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016